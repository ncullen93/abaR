[{"path":"https://ncullen93.github.io/abaR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://ncullen93.github.io/abaR/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://ncullen93.github.io/abaR/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://ncullen93.github.io/abaR/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://ncullen93.github.io/abaR/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://ncullen93.github.io/abaR/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://ncullen93.github.io/abaR/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://ncullen93.github.io/abaR/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://ncullen93.github.io/abaR/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://ncullen93.github.io/abaR/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://ncullen93.github.io/abaR/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://ncullen93.github.io/abaR/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://ncullen93.github.io/abaR/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://ncullen93.github.io/abaR/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://ncullen93.github.io/abaR/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://ncullen93.github.io/abaR/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://ncullen93.github.io/abaR/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://ncullen93.github.io/abaR/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://ncullen93.github.io/abaR/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://ncullen93.github.io/abaR/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://ncullen93.github.io/abaR/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://ncullen93.github.io/abaR/articles/aba.html","id":"head-1","dir":"Articles","previous_headings":"","what":"Head 1","title":"An overview of the abaR package","text":"test test table view results:","code":"library(dplyr, warn.conflicts = FALSE) library(aba) data <- adnimerge %>% dplyr::filter(VISCODE == 'bl')  model_spec <- aba_model() %>%   set_data(data) %>%    set_groups(     everyone(),     DX_bl %in% c('MCI','AD'),     .labels = c('All','MCI+AD')   ) %>%   set_outcomes(ConvertedToAlzheimers, CSF_ABETA_STATUS_bl,                .labels=c('AD','CSF Abeta')) %>%   set_predictors(     PLASMA_ABETA_bl,     PLASMA_PTAU181_bl,     PLASMA_NFL_bl,     c(PLASMA_ABETA_bl, PLASMA_PTAU181_bl, PLASMA_NFL_bl)   ) %>%   set_stats(stat_glm(std.beta=T))  model_fit <- model_spec %>% fit() #> [1] \"ConvertedToAlzheimers ~ PLASMA_ABETA_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_PTAU181_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_ABETA_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_PTAU181_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_ABETA_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_PTAU181_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_ABETA_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_PTAU181_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" model_summary <- model_fit %>% summary() model_summary %>% as_reactable()"},{"path":"https://ncullen93.github.io/abaR/articles/aba.html","id":"sub-1","dir":"Articles","previous_headings":"Head 1","what":"Sub 1","title":"An overview of the abaR package","text":"test test","code":""},{"path":"https://ncullen93.github.io/abaR/articles/aba.html","id":"sub-2","dir":"Articles","previous_headings":"Head 1","what":"Sub 2","title":"An overview of the abaR package","text":"test test","code":""},{"path":"https://ncullen93.github.io/abaR/articles/aba.html","id":"head-2","dir":"Articles","previous_headings":"","what":"Head 2","title":"An overview of the abaR package","text":"test test","code":""},{"path":"https://ncullen93.github.io/abaR/articles/aba.html","id":"head-3","dir":"Articles","previous_headings":"","what":"Head 3","title":"An overview of the abaR package","text":"test test","code":""},{"path":"https://ncullen93.github.io/abaR/articles/intro_to_aba_models.html","id":"what-is-an-aba-model","dir":"Articles","previous_headings":"","what":"What is an aba model?","title":"An introduction to aba models","text":"aba_model core function aba package. aba model contains information data factors analysis. fit aba model, can many cool things like creating publication-ready tables figures use make decisions future clinical trial. introduction tutorial, learn main components aba model get glimpse awesome functionalities aba package.","code":"library(aba) library(dplyr, warn.conflicts = FALSE)"},{"path":"https://ncullen93.github.io/abaR/articles/intro_to_aba_models.html","id":"a-basic-example","dir":"Articles","previous_headings":"","what":"A basic example","title":"An introduction to aba models","text":"aba model composed following factors: data groups outcomes predictors covariates statistics things define aba model. follows basic example fitting aba model perform logistic regression two different sub-groups data, two different outcomes, three different combinations predictor variables, three fixed covariate variables: see , set various factors aba model using set_* functions. functions modify build aba model. can print aba model console time get nice overview model contains: can see everything set included, along automatically generated labels (e.g., ‘G1’ ‘G2’ groups) dig later. case, ’ve sufficiently defined model – aba model needs least data, one outcomes stats, either one predictor covariate – call fit() function. function trigger actual fitting stats different group - outcome - predictor combinations. Now aba model fit, next natural thing call summary() function gather coefficients metrics statistical fit. see, summarizing aba model way collect important information. print aba summary console, formatted nice manner allowing inspect results. see later, values included summary formatted completely customizable. Although viewing nicely formatted summary table good way understand results, plotting variable coefficients model metrics can provide deeper insight. Therefore, multiple plotting functions aba work ---box aba summaries. includes aba_plot_coef() plotting coeffficients:  aba_plot_metric() plotting overall model metrics (case, AUC):  Moreover, stat special plotting functions allow look results. case, used logistic regression model (stat_glm()) useful making ROC curves:","code":"data <- adnimerge %>% dplyr::filter(VISCODE == 'bl')  model <- aba_model() %>%    set_data(data) %>%    set_groups(DX_bl %in% c('MCI','AD')) %>%    set_outcomes(ConvertedToAlzheimers, CSF_ABETA_STATUS_bl) %>%    set_predictors(     PLASMA_PTAU181_bl,     PLASMA_NFL_bl,     c(PLASMA_PTAU181_bl, PLASMA_NFL_bl)   ) %>%    set_covariates(AGE, GENDER, EDUCATION) %>%    set_stats(stat_glm(std.beta=T)) print(model) #> ---------------------- #> ABA MODEL (not fitted) #> ---------------------- #> Groups: #>    DX_bl %in% c(\"MCI\", \"AD\") #>  #> Outcomes: #>    ConvertedToAlzheimers #>    CSF_ABETA_STATUS_bl #>  #> Covariates: #>    AGE GENDER EDUCATION #>  #> Predictors: #>    M1 #>    M2 #>    M3 #>  #> Stats: #>    glm  #> model <- model %>% fit() #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ AGE + GENDER + EDUCATION\" #> [1] \"CSF_ABETA_STATUS_bl ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ AGE + GENDER + EDUCATION + PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" model_summary <- model %>% summary() model_summary %>% aba_plot_coef(coord_flip=T) model_summary %>% aba_plot_metric() model_summary %>% aba_plot_roc()"},{"path":"https://ncullen93.github.io/abaR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nicholas Cullen. Author, maintainer.","code":""},{"path":"https://ncullen93.github.io/abaR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Cullen N (2023). aba: Automated Biomarker Analysis. https://github.com/ncullen93/abaR/, https://ncullen93.github.io/abaR/.","code":"@Manual{,   title = {aba: Automated Biomarker Analysis},   author = {Nicholas Cullen},   year = {2023},   note = {https://github.com/ncullen93/abaR/, https://ncullen93.github.io/abaR/}, }"},{"path":"https://ncullen93.github.io/abaR/index.html","id":"automated-biomarker-analysis-aba","dir":"","previous_headings":"","what":"Automated Biomarker Analysis","title":"Automated Biomarker Analysis","text":"goals aba package follows: facilitate sound statistical modelling clinical research provide advanced tools biomarker-based planning clinical trials generate publication-ready tables figures overview image aba package, becomes easier fit statistical models permuatations covariates / predictors / outcomes / groups, make easier investigate biomarkers can used plan (screening / enirichment) analyze clinical trials, facilitate multi-cohort validation studies data easily shared collaborators.","code":""},{"path":"https://ncullen93.github.io/abaR/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"Automated Biomarker Analysis","text":"view tutorials examples use package, can visit package website https://ncullen93.github.io/abaR/. can install development version aba package GitHub following: typical workflow performing statistical analysis aba incredibly simple: can generate publication-ready figures just one line code: coefficient image","code":"# install.packages(\"devtools\") devtools::install_github(\"ncullen93/abaR\") library(aba)  df <- aba::adnimerge %>% filter(VISCODE == 'bl')  # build and fit an aba model with multiple outcomes and predictors model <- df %>% aba_model() %>%   set_outcomes(ConvertedToAlzheimers, CSF_ABETA_STATUS_bl) %>%   set_predictors(     PLASMA_ABETA_bl, PLASMA_PTAU181_bl, PLASMA_NFL_bl,     c(PLASMA_ABETA_bl, PLASMA_PTAU181_bl, PLASMA_NFL_bl)   ) %>%   set_stats('glm') %>%    fit()  # summarise the model results (coefficients and metrics) model_summary <- model_fit %>% summary() fig <- model_summary %>% aba_plot_coef(palette = 'lancet')"},{"path":"https://ncullen93.github.io/abaR/index.html","id":"publications","dir":"","previous_headings":"","what":"Publications","title":"Automated Biomarker Analysis","text":"publications whose analysis done partially completely functions aba package featured : Individualized prognosis cognitive decline dementia mild cognitive impairment based plasma biomarker combinations NC Cullen, Leuzy, S Palmqvist, S Janelidze, E Stomrud, P Pesini, et al. Nature Aging, 2021 Prediction future Alzheimer’s disease dementia using plasma phospho-tau combined accessible measures S Palmqvist, P Tideman, N Cullen, H Zetterberg, K Blennow, JL Dage, et al. Nature Medicine, 2021 Plasma biomarkers Alzheimer’s disease improve prediction cognitive decline cognitively unimpaired elderly populations NC Cullen, Leuzy, S Janelidze, S Palmqvist, AL Svenningsson, et al. Nature Communications, 2021 Comparing progression biomarkers clinical trials early Alzheimer’s disease NC Cullen, H Zetterberg, PS Insel, B Olsson, U Andreasson, et al. Annals Clinical Translational Neurology 7 (9), 1661-1673","code":""},{"path":"https://ncullen93.github.io/abaR/index.html","id":"cite","dir":"","previous_headings":"Publications","what":"Cite","title":"Automated Biomarker Analysis","text":"use aba package work, appreciate cite us. example statement can added end “Statistical analysis” section methods provided : analysis done R programming language (v4.0.3) using Automated Biomarker Analysis R (“aba”) package [citation].","code":""},{"path":"https://ncullen93.github.io/abaR/index.html","id":"receiving-help","dir":"","previous_headings":"","what":"Receiving help","title":"Automated Biomarker Analysis","text":"easiest way get help create issue github page send us email questions.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba.html","id":null,"dir":"Reference","previous_headings":"","what":"Automated biomarker analysis in R — aba","title":"Automated biomarker analysis in R — aba","text":"tool fit clinical prediction models plan clinical trials using biomarker data across multiple analysis factors (groups, outcomes, predictors).","code":""},{"path":[]},{"path":"https://ncullen93.github.io/abaR/reference/aba.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Automated biomarker analysis in R — aba","text":"Maintainer: Nicholas Cullen nickcullen31@gmail.com","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_adjust.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an aba_adjust object. — aba_adjust","title":"Create an aba_adjust object. — aba_adjust","text":"Adjust p-values (model /coefficients) abaSummary object.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_adjust.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an aba_adjust object. — aba_adjust","text":"","code":"aba_adjust(   method = c(\"none\", \"bonferroni\", \"fdr\", \"hochberg\", \"holm\", \"hommel\", \"BH\", \"BY\"),   family = c(\"group\", \"outcome\", \"stat\"),   target = c(\"metric\", \"coef\") )"},{"path":"https://ncullen93.github.io/abaR/reference/aba_adjust.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an aba_adjust object. — aba_adjust","text":"method string. method adjust . See p.adjust. family vector. factors consider family together Possible choices: group, outcome, stat, predictor target vector. Whether adjust metrics coefs, just one.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_adjust.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an aba_adjust object. — aba_adjust","text":"abaSummary object. abaSummary passed aba_adjust p-values changed according user specified.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_adjust.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an aba_adjust object. — aba_adjust","text":"","code":"df <- adnimerge %>% dplyr::filter(VISCODE == 'bl')  model <- df %>% aba_model() %>%   set_groups(everyone()) %>%   set_outcomes(ConvertedToAlzheimers, CSF_ABETA_STATUS_bl) %>%   set_predictors(     PLASMA_ABETA_bl, PLASMA_PTAU181_bl, PLASMA_NFL_bl,     c(PLASMA_ABETA_bl, PLASMA_PTAU181_bl, PLASMA_NFL_bl)   ) %>%   set_stats('glm') %>%   fit() #> [1] \"ConvertedToAlzheimers ~ PLASMA_ABETA_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_PTAU181_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_ABETA_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_PTAU181_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\"  # no adjustment model_summary <- model %>% aba_summary()  # default - correct within group, outcome, and stat (x4 comparisons) model_summary_adj <- model %>%   aba_summary(adjust = aba_adjust(method='bonferroni'))  # correct within group but across outcomes (x8 comparisons) model_summary_adj2 <- model %>%   aba_summary(adjust=aba_adjust(method='bonferroni', family = c('group')))  # correct only model P-values, not coefficient P-values model_summary_adj3 <- model %>%   aba_summary(adjust=aba_adjust(target = c('metric')))"},{"path":"https://ncullen93.github.io/abaR/reference/aba_control.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an aba control object. — aba_control","title":"Create an aba control object. — aba_control","text":"aba control determines aba summary calculated printed console.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an aba control object. — aba_control","text":"","code":"aba_control(   include_intercept = FALSE,   include_covariates = TRUE,   pval_digits = 4,   aic_digits = 0,   metric_digits = 2,   coef_digits = 2 )"},{"path":"https://ncullen93.github.io/abaR/reference/aba_control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an aba control object. — aba_control","text":"include_intercept boolean. Whether include intercept coefs include_covariates boolean. Whether include covariates coefs pval_digits integer. many decimals pvalue show aic_digits integer. many decimals AIC value show metric_digits integer. Default value many decimals show model metrics (e.g., auc, adj.r.squared, etc) coef_digits integer. Default value many decimals show model coefficients","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an aba control object. — aba_control","text":"list control parameters specified","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_control.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an aba control object. — aba_control","text":"","code":"df <- adnimerge %>% dplyr::filter(VISCODE == 'bl')  # standard example model <- df %>% aba_model() %>%   set_groups(everyone()) %>%   set_outcomes(CSF_ABETA_STATUS_bl) %>%   set_predictors(     PLASMA_PTAU181_bl, PLASMA_NFL_bl,     c(PLASMA_PTAU181_bl, PLASMA_NFL_bl)   ) %>%   set_covariates(AGE, GENDER, EDUCATION) %>%   set_stats('glm') %>%   aba_fit() #> [1] \"CSF_ABETA_STATUS_bl ~ AGE + GENDER + EDUCATION\" #> [1] \"CSF_ABETA_STATUS_bl ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ AGE + GENDER + EDUCATION + PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl + PLASMA_NFL_bl\"  # no control -> default model_summary <- model %>% aba_summary() print(model_summary) #> --------------------------------------------------------- #> Group: Everyone | Outcome: CSF_ABETA_STATUS_bl | Stat: S1 #> --------------------------------------------------------- #> Coefficients & Metrics: #> # A tibble: 4 × 10 #>   predictor AGE     GENDER EDUCA…¹ PLASM…² PLASM…³ auc   aic   pval  nobs  #>   <chr>     <chr>   <chr>  <chr>   <chr>   <chr>   <chr> <chr> <chr> <chr> #> 1 Basic     1.03 [… 1.39 … 0.93 [… NA      NA      0.58… 874   1.00… 645   #> 2 M1        1.01 [… 1.31 … 0.96 [… 3.89 [… NA      0.72… 799   <0.0… 645   #> 3 M2        1.00 [… 1.43 … 0.94 [… NA      2.27 [… 0.63… 862   0.00… 645   #> 4 M3        1.00 [… 1.33 … 0.96 [… 3.67 [… 1.29 [… 0.72… 800   <0.0… 645   #> # … with abbreviated variable names ¹​EDUCATION, ²​PLASMA_PTAU181_bl, #> #   ³​PLASMA_NFL_bl #>   # add a control object - don't include covariate coefficients my_control <- aba_control(include_covariates = FALSE) model_summary2 <- model %>% aba_summary(control = my_control) print(model_summary2) #> --------------------------------------------------------- #> Group: Everyone | Outcome: CSF_ABETA_STATUS_bl | Stat: S1 #> --------------------------------------------------------- #> Coefficients & Metrics: #> # A tibble: 3 × 7 #>   predictor PLASMA_PTAU181_bl            PLASMA_…¹ auc   aic   pval  nobs  #>   <chr>     <chr>                        <chr>     <chr> <chr> <chr> <chr> #> 1 M1        3.89 [2.80, 5.52] (P<0.0001) NA        0.72… 799   <0.0… 645   #> 2 M2        NA                           2.27 [1.… 0.63… 862   0.00… 645   #> 3 M3        3.67 [2.61, 5.29] (P<0.0001) 1.29 [0.… 0.72… 800   <0.0… 645   #> # … with abbreviated variable name ¹​PLASMA_NFL_bl #>"},{"path":"https://ncullen93.github.io/abaR/reference/aba_demographics.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a demographics table from a fitted aba model. — aba_demographics","title":"Create a demographics table from a fitted aba model. — aba_demographics","text":"function allows automatically create demographics table fitted aba model. variables table inferred spec model (predictors, covariates, outcomes, etc.), although can customized.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_demographics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a demographics table from a fitted aba model. — aba_demographics","text":"","code":"aba_demographics(   model,   strata = NULL,   include_predictors = TRUE,   include_covariates = TRUE,   include_outcomes = TRUE,   add_vars = NULL,   data_filter = NULL )"},{"path":"https://ncullen93.github.io/abaR/reference/aba_demographics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a demographics table from a fitted aba model. — aba_demographics","text":"model abaModel. fitted aba model create demographics table . strata string (optional). stratify demographics table. include_predictors boolean. Whether include predictors table. include_covariates boolean. Whether include covariates table. include_outcomes boolean. Whether include outcomes table. add_vars character vector (optional). additional variables add demographics table. variables present data aba model. data_filter logical expression (optional). specified, data aba model filtered table made.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_demographics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a demographics table from a fitted aba model. — aba_demographics","text":"TableOne object (see tableone package).","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_demographics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a demographics table from a fitted aba model. — aba_demographics","text":"Note support weaker longitudinal data right now.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_demographics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a demographics table from a fitted aba model. — aba_demographics","text":"","code":"model <- aba_model() %>%   set_data(adnimerge %>% dplyr::filter(VISCODE == 'bl')) %>%   set_groups(everyone()) %>%   set_outcomes(ConvertedToAlzheimers, CSF_ABETA_STATUS_bl) %>%   set_predictors(     PLASMA_PTAU181_bl, PLASMA_NFL_bl,     c(PLASMA_PTAU181_bl, PLASMA_NFL_bl)   ) %>%   set_covariates(AGE, GENDER, EDUCATION) %>%   set_stats('glm') %>%   aba_fit() #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ AGE + GENDER + EDUCATION\" #> [1] \"CSF_ABETA_STATUS_bl ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ AGE + GENDER + EDUCATION + PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl + PLASMA_NFL_bl\"  my_table <- model %>% aba_demographics(strata = 'DX_bl') print(my_table) #>                                    Stratified by DX_bl #>                                     Overall                   #>   n                                  2347           24        #>   AGE (mean (SD))                   73.07 (7.43) 68.85 (8.30) #>   GENDER (mean (SD))                 0.53 (0.50)  0.38 (0.49) #>   EDUCATION (mean (SD))             16.05 (2.75) 15.83 (2.16) #>   ConvertedToAlzheimers (mean (SD))  0.20 (0.40)   NaN (NA)   #>   CSF_ABETA_STATUS_bl (mean (SD))    0.62 (0.49)   NaN (NA)   #>   PLASMA_PTAU181_bl (mean (SD))      2.71 (0.64)   NaN (NA)   #>   PLASMA_NFL_bl (mean (SD))          3.54 (0.46)   NaN (NA)   #>                                    Stratified by DX_bl #>                                     AD           CU           #>   n                                   405          846        #>   AGE (mean (SD))                   74.80 (7.92) 72.69 (6.34) #>   GENDER (mean (SD))                 0.57 (0.50)  0.44 (0.50) #>   EDUCATION (mean (SD))             15.20 (2.91) 16.54 (2.53) #>   ConvertedToAlzheimers (mean (SD))  0.00 (NA)    0.03 (0.18) #>   CSF_ABETA_STATUS_bl (mean (SD))    0.88 (0.33)  0.39 (0.49) #>   PLASMA_PTAU181_bl (mean (SD))      3.05 (0.41)  2.54 (0.67) #>   PLASMA_NFL_bl (mean (SD))          3.77 (0.42)  3.45 (0.42) #>                                    Stratified by DX_bl #>                                     MCI          p      test #>   n                                  1072                    #>   AGE (mean (SD))                   72.80 (7.89) <0.001      #>   GENDER (mean (SD))                 0.59 (0.49) <0.001      #>   EDUCATION (mean (SD))             15.99 (2.78) <0.001      #>   ConvertedToAlzheimers (mean (SD))  0.33 (0.47)     NA      #>   CSF_ABETA_STATUS_bl (mean (SD))    0.63 (0.48) <0.001      #>   PLASMA_PTAU181_bl (mean (SD))      2.70 (0.64) <0.001      #>   PLASMA_NFL_bl (mean (SD))          3.52 (0.47) <0.001"},{"path":"https://ncullen93.github.io/abaR/reference/aba_diagnosticpower.html","id":null,"dir":"Reference","previous_headings":"","what":"Caclulate diagnostic power based on a fitted aba model — aba_diagnosticpower","title":"Caclulate diagnostic power based on a fitted aba model — aba_diagnosticpower","text":"function calculates power diagnostic test based fitted results aba model. sensitivity/specificity prevalance extracted fitted model 'n', 'power', 'delta' can calculated null hypothesis performance. function can useful pilot data want plan larger experiment based information rather making less data-driven assumptions.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_diagnosticpower.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Caclulate diagnostic power based on a fitted aba model — aba_diagnosticpower","text":"","code":"aba_diagnosticpower(model, delta = NULL, n = NULL, metric = c(\"sens\", \"spec\"))"},{"path":"https://ncullen93.github.io/abaR/reference/aba_diagnosticpower.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Caclulate diagnostic power based on a fitted aba model — aba_diagnosticpower","text":"model fitted aba model. model want run power analysis . delta value 0 0.5. half-size confidence interval want () acheive estimated sensitivity/specificity. Either delta n specified. n integer. number positive cases (sensitivity) negative cases (specificity) want (need ) include. Either delta n specified. metric string: sens spec. metric interest - either sensitivity specificity","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_diagnosticpower.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Caclulate diagnostic power based on a fitted aba model — aba_diagnosticpower","text":"data frame results power.diagnostic.test function fit aba model.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_diagnosticpower.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Caclulate diagnostic power based on a fitted aba model — aba_diagnosticpower","text":"","code":"# We fit a diagnostic model on pilot data. data <- adnimerge %>% dplyr::filter(VISCODE == 'bl', DX_bl == 'MCI') model <- data %>% aba_model() %>%   set_groups(everyone()) %>%   set_outcomes(ConvertedToAlzheimers, CSF_ABETA_STATUS_bl) %>%   set_predictors(     PLASMA_PTAU181_bl, PLASMA_NFL_bl,     c(PLASMA_PTAU181_bl, PLASMA_NFL_bl)   ) %>%   set_covariates(AGE, GENDER, EDUCATION) %>%   set_stats(     stat_glm(std.beta = TRUE)   ) %>%   fit() #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ AGE + GENDER + EDUCATION\" #> [1] \"CSF_ABETA_STATUS_bl ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ AGE + GENDER + EDUCATION + PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl + PLASMA_NFL_bl\"  # What will the delta on sensitivity be with 100 subjects res_delta <- model %>% aba_diagnosticpower(n = 100)  # How many subjects do we need to acheive a delta of 0.1 on sensitivity res_n <- model %>% aba_diagnosticpower(delta = 0.1)"},{"path":"https://ncullen93.github.io/abaR/reference/aba_emmeans.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculated estimated marginal means. — aba_emmeans","title":"Calculated estimated marginal means. — aba_emmeans","text":"function estimates estimated marginal means (also known least-square means) , relevant, treatment effects mmrm, lme, ancova models.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_emmeans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculated estimated marginal means. — aba_emmeans","text":"","code":"aba_emmeans(model)"},{"path":"https://ncullen93.github.io/abaR/reference/aba_emmeans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculated estimated marginal means. — aba_emmeans","text":"model abaModel. fitted aba model run emmeans .","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_emmeans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculated estimated marginal means. — aba_emmeans","text":"abaEmmeans object. object contains emmeans, paired comparisons (.e., treatment effect), sample size visit.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_emmeans.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculated estimated marginal means. — aba_emmeans","text":"function based emmeans::emmeans function. function run stats supported emmeans.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_emmeans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculated estimated marginal means. — aba_emmeans","text":"","code":"# process data: take first 4 visits, only MCI, use CSF abeta as \"treatment\", # and create endpoint as change from baseline in cognition at each visit df <- adnimerge %>%   dplyr::filter(     VISCODE %in% c('bl','m06','m12','m24'),     !is.na(CSF_ABETA_STATUS_bl),     DX_bl %in% c('MCI')   ) %>%   dplyr::mutate(     TREATMENT = factor(CSF_ABETA_STATUS_bl, levels=c(0,1),                        labels=c('Placebo','Treatment')),     ADAS13 = ADAS13 - ADAS13_bl,     CDRSB = CDRSB - CDRSB_bl,     MMSE = MMSE - MMSE_bl   )  # fit mmrm model for different endpoints, adjusted for covariates model <- df %>% aba_model() %>%   set_outcomes(CDRSB, ADAS13, MMSE) %>%   set_covariates(     AGE, GENDER, EDUCATION   ) %>%   set_stats(     stat_mmrm(id = 'RID', time = 'VISCODE', treatment = 'TREATMENT')   ) %>%   aba_fit()  # run emmeans # \\donttest{ model_emmeans <- model %>% aba_emmeans() # }"},{"path":"https://ncullen93.github.io/abaR/reference/aba_evaluate.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate a fitted aba model on new data — aba_evaluate","title":"Evaluate a fitted aba model on new data — aba_evaluate","text":"function lets evaluate performance fitted aba model new data.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_evaluate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate a fitted aba model on new data — aba_evaluate","text":"","code":"aba_evaluate(model, data)"},{"path":"https://ncullen93.github.io/abaR/reference/aba_evaluate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate a fitted aba model on new data — aba_evaluate","text":"model fitted aba model. model test new data data dataframe. new data fitted model tested.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_evaluate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate a fitted aba model on new data — aba_evaluate","text":"object class 'abaEvaluate' contains model performance data","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_evaluate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate a fitted aba model on new data — aba_evaluate","text":"","code":"# create separate training and testing datasets data <- adnimerge %>% dplyr::filter(VISCODE == 'bl') train_id <- sample(nrow(data), 0.8*nrow(data), replace = FALSE) data_train <- data %>% dplyr::filter(dplyr::row_number() %in% train_id) data_test <- data %>% dplyr::filter(dplyr::row_number() %in% train_id)  # fit model on train data model <- aba_model() %>%   set_data(data_train) %>%   set_groups(     everyone(),     DX_bl %in% c('MCI', 'AD')   ) %>%   set_outcomes(CDRSB_bl, MMSE_bl) %>%   set_predictors(     PLASMA_PTAU181_bl, PLASMA_NFL_bl,     c(PLASMA_PTAU181_bl, PLASMA_NFL_bl)   ) %>%   set_covariates(AGE, GENDER, EDUCATION) %>%   set_stats('lm') %>%   fit() #> [1] \"CDRSB_bl ~ AGE + GENDER + EDUCATION\" #> [1] \"CDRSB_bl ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl\" #> [1] \"CDRSB_bl ~ AGE + GENDER + EDUCATION + PLASMA_NFL_bl\" #> [1] \"CDRSB_bl ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"MMSE_bl ~ AGE + GENDER + EDUCATION\" #> [1] \"MMSE_bl ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl\" #> [1] \"MMSE_bl ~ AGE + GENDER + EDUCATION + PLASMA_NFL_bl\" #> [1] \"MMSE_bl ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"CDRSB_bl ~ AGE + GENDER + EDUCATION\" #> [1] \"CDRSB_bl ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl\" #> [1] \"CDRSB_bl ~ AGE + GENDER + EDUCATION + PLASMA_NFL_bl\" #> [1] \"CDRSB_bl ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"MMSE_bl ~ AGE + GENDER + EDUCATION\" #> [1] \"MMSE_bl ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl\" #> [1] \"MMSE_bl ~ AGE + GENDER + EDUCATION + PLASMA_NFL_bl\" #> [1] \"MMSE_bl ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl + PLASMA_NFL_bl\"  # evaluate fitted model on test data res <- model %>% aba_evaluate(data = data_test)"},{"path":"https://ncullen93.github.io/abaR/reference/aba_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit an aba model. — aba_fit","title":"Fit an aba model. — aba_fit","text":"Calling aba_fit trigger fitting statistical models specified model. result fits group - outcome - stat combination.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit an aba model. — aba_fit","text":"","code":"aba_fit(object, verbose = FALSE)"},{"path":"https://ncullen93.github.io/abaR/reference/aba_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit an aba model. — aba_fit","text":"object aba model aba model fitted. verbose logical. Whether give progress bar model fitting.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit an aba model. — aba_fit","text":"abaModel","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_fit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit an aba model. — aba_fit","text":"Note function identical generic fit() function also provided compatability greater R ecosystem.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit an aba model. — aba_fit","text":"","code":"data <- adnimerge %>% dplyr::filter(VISCODE == 'bl')  model_spec <- aba_model() %>%   set_data(data) %>%   set_groups(everyone()) %>%   set_outcomes(ConvertedToAlzheimers, CSF_ABETA_STATUS_bl) %>%   set_predictors(     PLASMA_ABETA_bl, PLASMA_PTAU181_bl, PLASMA_NFL_bl,     c(PLASMA_ABETA_bl, PLASMA_PTAU181_bl, PLASMA_NFL_bl)   ) %>%   set_stats('glm')  model <- model_spec %>% aba_fit() #> [1] \"ConvertedToAlzheimers ~ PLASMA_ABETA_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_PTAU181_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_ABETA_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_PTAU181_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\""},{"path":"https://ncullen93.github.io/abaR/reference/aba_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate reference grid from aba model — aba_grid","title":"Calculate reference grid from aba model — aba_grid","text":"function calculates reference grid fitted result aba model based specified parameters (see emmeans::ref_grid examples). predictions standard errors fitted result also included grid default","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate reference grid from aba model — aba_grid","text":"","code":"aba_grid(model, at = NULL, expand = NULL, reduce_fn = mean)"},{"path":"https://ncullen93.github.io/abaR/reference/aba_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate reference grid from aba model — aba_grid","text":"model aba model. fitted aba model compute reference grid. named list vectors. named list name variable model value vector values included list. expand character vector. Variables model observed values variable included grid. reduce_fn function. variables expand reduced based function. default mean, mean value variables included grid. However, reduce function can just well return multiple values custom fn: e.g. function(x) { seq(min(x), max(x), length.=10) } include 10 values grid spaced around min max.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate reference grid from aba model — aba_grid","text":"dataframe","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate reference grid from aba model — aba_grid","text":"","code":"# get data data <- aba::adnimerge %>%   filter(     AGE > 20,     YEARS_bl <= 3.5,     DX_bl == 'MCI'   ) #> Error in match.arg(method): object 'YEARS_bl' not found data_bl <- data %>% filter(VISCODE == 'bl') #> Error in attr(data, \"tsp\") <- c(start, end, frequency): object is not a matrix  model <- data_bl %>%   aba_model() %>%   set_outcomes(ADAS13_bl, CDRSB_bl) %>%   set_predictors(     c(AGE, EDUCATION),     AGE   ) %>%   set_stats('lm') %>%   fit() #> Error in aba_model(.): object 'data_bl' not found  model_grid <- model %>% aba_grid(at = list('AGE' = c(70, 80, 90))) #> Error in nrow(model$results): object 'model' not found  # All observed values of 'EDUCATION' will be included in the grid # For all other vars ('AGE'), a 4-val seq spaced from min-max will be included model_grid <- model %>% aba_grid(   expand = c('EDUCATION'),   reduce_fn = function(x) { seq(min(x), max(x), length.out=4) } ) #> Error in nrow(model$results): object 'model' not found"},{"path":"https://ncullen93.github.io/abaR/reference/aba_longpower.html","id":null,"dir":"Reference","previous_headings":"","what":"Run power analysis on a longitudinal-based aba model. — aba_longpower","title":"Run power analysis on a longitudinal-based aba model. — aba_longpower","text":"function allows users calculate power, required sample size, percent change (.e., treatment effect) fitted aba model uses longitudinal stats stat_lmer. Whichever argument left NULL argument function solves. Users can specify range values function arguments test different assumptions.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_longpower.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run power analysis on a longitudinal-based aba model. — aba_longpower","text":"","code":"aba_longpower(   model,   n = NULL,   pct_change = NULL,   power = NULL,   t_length = NULL,   t_freq = NULL,   sig_level = 0.05,   dropout = 0 )"},{"path":"https://ncullen93.github.io/abaR/reference/aba_longpower.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run power analysis on a longitudinal-based aba model. — aba_longpower","text":"model aba model. fitted aba model calculate power. model feature longitudinal aba stat (e.g., stat_lmer) n integer. total minimum required sample size. pct_change double 0 - 1. expected treatment effect means percent slope decrease treatment group. Note \"absolute\" treatment effects currently supported. power double 0 - 1. expected power detect treatment effect. t_length double. expected duration clinical trial. Note value scale time argument used fit longitudinal aba stat. longer trial generally result smaller sample size higher power. t_freq double. expected frequency endpoint sampling trial. value less t_length. Note value also scale time argument used fit longitudinal aba stat. sig_level double 0 - 1. required alpha level. usually little reason change default 0.05. dropout double 0 - 1. expected overall drop-rate trial. Note handle dropout fairly crude way simply multiplying sample size (1 + dropout) instead , say, sampling dropout distribution visit.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_longpower.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run power analysis on a longitudinal-based aba model. — aba_longpower","text":"aba longpower object can plotted printed special ways contains resulting calculations.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_longpower.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run power analysis on a longitudinal-based aba model. — aba_longpower","text":"Power calculated using lmmpower function longpower package R. Please see documentation get better understanding actual formulas involved.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_longpower.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run power analysis on a longitudinal-based aba model. — aba_longpower","text":"","code":"# use only two year follow-up data; filter by some basic AD trial criteria data <- adnimerge %>%   dplyr::filter(     VISCODE %in% c('bl', 'm06', 'm12', 'm24'),     DX_bl %in% c('MCI','AD'),     CDR_bl %in% c(0.5, 1),     MMSE_bl >= 20, MMSE_bl <= 28   )  # fit an aba model with an lme stat to get a longitudinal model model <- data %>% aba_model() %>%   set_outcomes(CDRSB, ADAS13) %>%   set_covariates(AGE, GENDER, EDUCATION) %>%   set_stats(stat_lmer(id = 'RID', time = 'YEARS_bl')) %>%   fit()  # summarize aba model - not necessary here but good to see results model_summary <- model %>% summary() #> New names: #> • `nobs` -> `nobs...1` #> • `nobs` -> `nobs...9` #> New names: #> • `nobs` -> `nobs...1` #> • `nobs` -> `nobs...9`  # run power analysis on the fitted aba model with various assumptions # e.g., treatment effect between 25 - 35%; power between 80 - 90% pwr <- model %>%   aba_longpower(     n = NULL,     pct_change = c(0.25, 0.30, 0.35),     power = c(0.8, 0.85, 0.9),     t_length = 2,     t_freq = 0.25,     dropout = 0.2   )  # generate a standard results figure from the power results fig <- pwr %>% aba_plot()  # add better inclusion criteria (CSF & CSF+MRI) to the aba model and refit. model2 <- model %>%   set_groups(     everyone(),     (CSF_ABETA_bl < 880) & (CSF_PTAU_bl > 24),     (CSF_ABETA_bl < 880) & (CSF_PTAU_bl > 24) & (MRI_HIPP_bl < 6000),     .labels = c('DX + COG', 'DX + COG + CSF', 'DX + COG + CSF + MRI')   ) %>%   fit()  # summarise model fit - again, not necessary but good to see slopes model2_summary <- model2 %>% summary() #> New names: #> • `nobs` -> `nobs...1` #> • `nobs` -> `nobs...9` #> New names: #> • `nobs` -> `nobs...1` #> • `nobs` -> `nobs...9` #> New names: #> • `nobs` -> `nobs...1` #> • `nobs` -> `nobs...9` #> New names: #> • `nobs` -> `nobs...1` #> • `nobs` -> `nobs...9` #> New names: #> • `nobs` -> `nobs...1` #> • `nobs` -> `nobs...9` #> New names: #> • `nobs` -> `nobs...1` #> • `nobs` -> `nobs...9`  pwr2 <- model2 %>%   aba_longpower(     n = NULL,     pct_change = c(0.25, 0.3, 0.35),     power = c(0.8, 0.85, 0.9),     t_length = 2,     t_freq = 0.25,     dropout = 0.2   )  fig2 <- pwr2 %>% aba_plot()"},{"path":"https://ncullen93.github.io/abaR/reference/aba_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an aba model. — aba_model","title":"Create an aba model. — aba_model","text":"aba model foundational object aba package. composed following: data: data.frame used fit statistical models spec: specification aba model composed following: groups: subsets data outcomes: dependent variables statistical fits. covariates: independent variables always included statistical fits. predictors: independent variables vary across different statistical fits. results: resulting fitted statistics.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an aba model. — aba_model","text":"","code":"aba_model(   data = NULL,   groups = NULL,   outcomes = NULL,   predictors = NULL,   covariates = NULL,   stats = NULL,   evals = NULL,   include_basic = TRUE )"},{"path":"https://ncullen93.github.io/abaR/reference/aba_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an aba model. — aba_model","text":"data data.frame data use object groups vector list logical statements trings. Groups subsets data different models fit. outcomes vector list strings Outcomes dependent variables statistical fits. predictors vector list strings Predictors independent variables want vary. can include variables combination others. collection variables referred predictor unique variables referred term. covariates vector strings Covariates independent variables remain fixed across statistical fits therefore always included different combinations predictors. stats string abaStat object(s) stat_ prefix. Stats actual statistical models want fit data. primary functions 1) generate suitable model formula given outcome - covariate - predictor combination, 2) actually fit statistical model. evals string abaEveal object(s) eval_ prefix. Evals ways model fit data. standard method simply fit models entire data, can also fit models using bootstrapping, train-test splits, cross validation. include_basic logical. Whether fit \"basic\" model includes covariates.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an aba model. — aba_model","text":"aba model can fitted using aba_fit() function can modified manner.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an aba model. — aba_model","text":"","code":"# use built-in data and only take the baseline visit data <- adnimerge %>% dplyr::filter(VISCODE == 'bl')  # Create aba model w/ data, groups, outcomes, covariates, predictors, stats. # Note that we start with piping the data into the aba_model... This is # possible because `data` is the first argument of the `aba_model()` function # and is useful because it gives auto-completion of variables names in Rstudio. model <- data %>% aba_model() %>%   set_groups(everyone(), DX_bl %in% c('MCI','AD')) %>%   set_outcomes(ConvertedToAlzheimers, CSF_ABETA_STATUS_bl) %>%   set_covariates(AGE, GENDER, EDUCATION) %>%   set_predictors(     PLASMA_ABETA_bl, PLASMA_PTAU181_bl, PLASMA_NFL_bl,     c(PLASMA_ABETA_bl, PLASMA_PTAU181_bl, PLASMA_NFL_bl)   ) %>%   set_stats('glm')  # get a useful view of the model spec: print(model) #> ---------------------- #> ABA MODEL (not fitted) #> ---------------------- #> Groups: #>    Everyone #>    DX_bl %in% c(\"MCI\", \"AD\") #>  #> Outcomes: #>    ConvertedToAlzheimers #>    CSF_ABETA_STATUS_bl #>  #> Covariates: #>    AGE GENDER EDUCATION #>  #> Predictors: #>    M1 #>    M2 #>    M3 #>    M4 #>  #> Stats: #>    glm  #>      # model specs can be modified to build on one another and save time when # doing sensitivity analyses. Here, we create the same model as before but # just add APOE4 as covariate. model2 <- model %>%   set_covariates(AGE, GENDER, EDUCATION, APOE4)  # see this change in the model print print(model2) #> ---------------------- #> ABA MODEL (not fitted) #> ---------------------- #> Groups: #>    Everyone #>    DX_bl %in% c(\"MCI\", \"AD\") #>  #> Outcomes: #>    ConvertedToAlzheimers #>    CSF_ABETA_STATUS_bl #>  #> Covariates: #>    AGE GENDER EDUCATION APOE4 #>  #> Predictors: #>    M1 #>    M2 #>    M3 #>    M4 #>  #> Stats: #>    glm  #>      # Calling the `fit()` function actually triggers fitting of statistics. model <- model %>% fit() #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + PLASMA_ABETA_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ AGE + GENDER + EDUCATION\" #> [1] \"CSF_ABETA_STATUS_bl ~ AGE + GENDER + EDUCATION + PLASMA_ABETA_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ AGE + GENDER + EDUCATION + PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ AGE + GENDER + EDUCATION + PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + PLASMA_ABETA_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ AGE + GENDER + EDUCATION\" #> [1] \"CSF_ABETA_STATUS_bl ~ AGE + GENDER + EDUCATION + PLASMA_ABETA_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ AGE + GENDER + EDUCATION + PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ AGE + GENDER + EDUCATION + PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" model2 <- model2 %>% fit() #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + APOE4\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + APOE4 + PLASMA_ABETA_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + APOE4 + PLASMA_PTAU181_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + APOE4 + PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + APOE4 + PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ AGE + GENDER + EDUCATION + APOE4\" #> [1] \"CSF_ABETA_STATUS_bl ~ AGE + GENDER + EDUCATION + APOE4 + PLASMA_ABETA_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ AGE + GENDER + EDUCATION + APOE4 + PLASMA_PTAU181_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ AGE + GENDER + EDUCATION + APOE4 + PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ AGE + GENDER + EDUCATION + APOE4 + PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + APOE4\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + APOE4 + PLASMA_ABETA_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + APOE4 + PLASMA_PTAU181_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + APOE4 + PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + APOE4 + PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ AGE + GENDER + EDUCATION + APOE4\" #> [1] \"CSF_ABETA_STATUS_bl ~ AGE + GENDER + EDUCATION + APOE4 + PLASMA_ABETA_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ AGE + GENDER + EDUCATION + APOE4 + PLASMA_PTAU181_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ AGE + GENDER + EDUCATION + APOE4 + PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ AGE + GENDER + EDUCATION + APOE4 + PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\"  # Access the raw results in case you care about that: print(model$results) #> # A tibble: 20 × 5 #>    group                           outcome             stat  predi…¹ fit   #>    <chr>                           <chr>               <chr> <chr>   <lis> #>  1 \"Everyone\"                      ConvertedToAlzheim… S1    Basic   <glm> #>  2 \"Everyone\"                      ConvertedToAlzheim… S1    M1      <glm> #>  3 \"Everyone\"                      ConvertedToAlzheim… S1    M2      <glm> #>  4 \"Everyone\"                      ConvertedToAlzheim… S1    M3      <glm> #>  5 \"Everyone\"                      ConvertedToAlzheim… S1    M4      <glm> #>  6 \"Everyone\"                      CSF_ABETA_STATUS_bl S1    Basic   <glm> #>  7 \"Everyone\"                      CSF_ABETA_STATUS_bl S1    M1      <glm> #>  8 \"Everyone\"                      CSF_ABETA_STATUS_bl S1    M2      <glm> #>  9 \"Everyone\"                      CSF_ABETA_STATUS_bl S1    M3      <glm> #> 10 \"Everyone\"                      CSF_ABETA_STATUS_bl S1    M4      <glm> #> 11 \"DX_bl %in% c(\\\"MCI\\\", \\\"AD\\\")\" ConvertedToAlzheim… S1    Basic   <glm> #> 12 \"DX_bl %in% c(\\\"MCI\\\", \\\"AD\\\")\" ConvertedToAlzheim… S1    M1      <glm> #> 13 \"DX_bl %in% c(\\\"MCI\\\", \\\"AD\\\")\" ConvertedToAlzheim… S1    M2      <glm> #> 14 \"DX_bl %in% c(\\\"MCI\\\", \\\"AD\\\")\" ConvertedToAlzheim… S1    M3      <glm> #> 15 \"DX_bl %in% c(\\\"MCI\\\", \\\"AD\\\")\" ConvertedToAlzheim… S1    M4      <glm> #> 16 \"DX_bl %in% c(\\\"MCI\\\", \\\"AD\\\")\" CSF_ABETA_STATUS_bl S1    Basic   <glm> #> 17 \"DX_bl %in% c(\\\"MCI\\\", \\\"AD\\\")\" CSF_ABETA_STATUS_bl S1    M1      <glm> #> 18 \"DX_bl %in% c(\\\"MCI\\\", \\\"AD\\\")\" CSF_ABETA_STATUS_bl S1    M2      <glm> #> 19 \"DX_bl %in% c(\\\"MCI\\\", \\\"AD\\\")\" CSF_ABETA_STATUS_bl S1    M3      <glm> #> 20 \"DX_bl %in% c(\\\"MCI\\\", \\\"AD\\\")\" CSF_ABETA_STATUS_bl S1    M4      <glm> #> # … with abbreviated variable name ¹​predictor  # Calling the `summary()` function summarises covariates and metrics in # a useful manner model_summary <- model %>% summary() model2_summary <- model2 %>% summary()  # see a nicely formatted print out of the summary print(model_summary) #> ----------------------------------------------------------- #> Group: Everyone | Outcome: ConvertedToAlzheimers | Stat: S1 #> ----------------------------------------------------------- #> Coefficients & Metrics: #> # A tibble: 5 × 11 #>   predictor AGE   GENDER EDUCA…¹ PLASM…² PLASM…³ PLASM…⁴ auc   aic   pval  #>   <chr>     <chr> <chr>  <chr>   <chr>   <chr>   <chr>   <chr> <chr> <chr> #> 1 Basic     1.03… 0.70 … 1.02 [… NA      NA      NA      0.58… 123   1.00… #> 2 M1        1.03… 0.66 … 1.02 [… 0.00 [… NA      NA      0.61… 124   0.36… #> 3 M2        1.01… 0.75 … 1.01 [… NA      2.65 [… NA      0.70… 120   0.03… #> 4 M3        0.95… 0.82 … 1.04 [… NA      NA      15.47 … 0.75… 112   0.00… #> 5 M4        0.94… 0.75 … 1.05 [… 0.00 [… 2.10 [… 12.64 … 0.79… 114   0.00… #> # … with 1 more variable: nobs <chr>, and abbreviated variable names #> #   ¹​EDUCATION, ²​PLASMA_ABETA_bl, ³​PLASMA_PTAU181_bl, ⁴​PLASMA_NFL_bl #>  #> --------------------------------------------------------- #> Group: Everyone | Outcome: CSF_ABETA_STATUS_bl | Stat: S1 #> --------------------------------------------------------- #> Coefficients & Metrics: #> # A tibble: 5 × 11 #>   predictor AGE   GENDER EDUCA…¹ PLASM…² PLASM…³ PLASM…⁴ auc   aic   pval  #>   <chr>     <chr> <chr>  <chr>   <chr>   <chr>   <chr>   <chr> <chr> <chr> #> 1 Basic     1.06… 1.27 … 0.99 [… NA      NA      NA      0.61… 213   1.00… #> 2 M1        1.03… 1.01 … 1.00 [… 0.00 [… NA      NA      0.74… 199   0.00… #> 3 M2        1.04… 1.33 … 0.99 [… NA      3.28 [… NA      0.71… 200   0.00… #> 4 M3        1.06… 1.27 … 0.98 [… NA      NA      0.81 [… 0.61… 215   0.66… #> 5 M4        1.04… 1.09 … 1.00 [… 0.00 [… 2.64 [… 0.57 [… 0.76… 194   <0.0… #> # … with 1 more variable: nobs <chr>, and abbreviated variable names #> #   ¹​EDUCATION, ²​PLASMA_ABETA_bl, ³​PLASMA_PTAU181_bl, ⁴​PLASMA_NFL_bl #>  #> ---------------------------------------------------------------------------- #> Group: DX_bl %in% c(\"MCI\", \"AD\") | Outcome: ConvertedToAlzheimers | Stat: S1 #> ---------------------------------------------------------------------------- #> Coefficients & Metrics: #> # A tibble: 5 × 11 #>   predictor AGE   GENDER EDUCA…¹ PLASM…² PLASM…³ PLASM…⁴ auc   aic   pval  #>   <chr>     <chr> <chr>  <chr>   <chr>   <chr>   <chr>   <chr> <chr> <chr> #> 1 Basic     1.06… 0.74 … 1.05 [… NA      NA      NA      0.65… 84    1.00… #> 2 M1        1.05… 0.73 … 1.04 [… 0.00 [… NA      NA      0.66… 86    0.54… #> 3 M2        1.06… 0.76 … 1.08 [… NA      3.56 [… NA      0.74… 81    0.02… #> 4 M3        0.99… 0.75 … 1.13 [… NA      NA      14.16 … 0.72… 79    0.00… #> 5 M4        0.99… 0.76 … 1.17 [… 0.76 [… 3.29 [… 13.27 … 0.78… 78    0.00… #> # … with 1 more variable: nobs <chr>, and abbreviated variable names #> #   ¹​EDUCATION, ²​PLASMA_ABETA_bl, ³​PLASMA_PTAU181_bl, ⁴​PLASMA_NFL_bl #>  #> -------------------------------------------------------------------------- #> Group: DX_bl %in% c(\"MCI\", \"AD\") | Outcome: CSF_ABETA_STATUS_bl | Stat: S1 #> -------------------------------------------------------------------------- #> Coefficients & Metrics: #> # A tibble: 5 × 11 #>   predictor AGE   GENDER EDUCA…¹ PLASM…² PLASM…³ PLASM…⁴ auc   aic   pval  #>   <chr>     <chr> <chr>  <chr>   <chr>   <chr>   <chr>   <chr> <chr> <chr> #> 1 Basic     1.05… 2.31 … 0.96 [… NA      NA      NA      0.64… 103   1.00… #> 2 M1        1.01… 2.41 … 0.96 [… 0.00 [… NA      NA      0.76… 96    0.00… #> 3 M2        1.05… 2.46 … 0.99 [… NA      2.93 [… NA      0.72… 100   0.01… #> 4 M3        1.04… 2.29 … 0.97 [… NA      NA      1.19 [… 0.63… 105   0.79… #> 5 M4        1.01… 2.45 … 0.98 [… 0.00 [… 2.06 [… 1.23 [… 0.78… 97    0.00… #> # … with 1 more variable: nobs <chr>, and abbreviated variable names #> #   ¹​EDUCATION, ²​PLASMA_ABETA_bl, ³​PLASMA_PTAU181_bl, ⁴​PLASMA_NFL_bl #>   # or access the raw summary results: print(model_summary$results) #> $coefs #> # A tibble: 84 × 9 #>    group    outcome     stat  predi…¹ term  estim…² conf_low conf_…³  pval #>    <chr>    <chr>       <chr> <chr>   <chr>   <dbl>    <dbl>   <dbl> <dbl> #>  1 Everyone ConvertedT… S1    Basic   AGE   1.03e+0 9.62e- 1  1.11e0 0.361 #>  2 Everyone ConvertedT… S1    Basic   GEND… 7.00e-1 2.32e- 1  2.00e0 0.510 #>  3 Everyone ConvertedT… S1    Basic   EDUC… 1.02e+0 8.32e- 1  1.26e0 0.868 #>  4 Everyone ConvertedT… S1    M1      AGE   1.03e+0 9.52e- 1  1.11e0 0.507 #>  5 Everyone ConvertedT… S1    M1      GEND… 6.57e-1 2.15e- 1  1.90e0 0.443 #>  6 Everyone ConvertedT… S1    M1      EDUC… 1.02e+0 8.36e- 1  1.26e0 0.833 #>  7 Everyone ConvertedT… S1    M1      PLAS… 1.44e-8 4.99e-26  3.90e8 0.368 #>  8 Everyone ConvertedT… S1    M2      AGE   1.01e+0 9.41e- 1  1.09e0 0.715 #>  9 Everyone ConvertedT… S1    M2      GEND… 7.52e-1 2.41e- 1  2.23e0 0.610 #> 10 Everyone ConvertedT… S1    M2      EDUC… 1.01e+0 8.19e- 1  1.25e0 0.937 #> # … with 74 more rows, and abbreviated variable names ¹​predictor, #> #   ²​estimate, ³​conf_high #>  #> $metrics #> # A tibble: 80 × 8 #>    group    outcome            stat  predi…¹ term  estim…² conf_…³ conf_…⁴ #>    <chr>    <chr>              <chr> <chr>   <chr>   <dbl>   <dbl>   <dbl> #>  1 Everyone ConvertedToAlzhei… S1    Basic   auc     0.576   0.416   0.735 #>  2 Everyone ConvertedToAlzhei… S1    Basic   aic   123.     NA      NA     #>  3 Everyone ConvertedToAlzhei… S1    Basic   pval    1      NA      NA     #>  4 Everyone ConvertedToAlzhei… S1    Basic   nobs  198      NA      NA     #>  5 Everyone ConvertedToAlzhei… S1    M1      auc     0.606   0.454   0.757 #>  6 Everyone ConvertedToAlzhei… S1    M1      aic   124.     NA      NA     #>  7 Everyone ConvertedToAlzhei… S1    M1      pval    0.361  NA      NA     #>  8 Everyone ConvertedToAlzhei… S1    M1      nobs  198      NA      NA     #>  9 Everyone ConvertedToAlzhei… S1    M2      auc     0.701   0.591   0.812 #> 10 Everyone ConvertedToAlzhei… S1    M2      aic   120.     NA      NA     #> # … with 70 more rows, and abbreviated variable names ¹​predictor, #> #   ²​estimate, ³​conf_low, ⁴​conf_high #>"},{"path":"https://ncullen93.github.io/abaR/reference/aba_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot an aba object — aba_plot","title":"Plot an aba object — aba_plot","text":"generic function plotting aba object. resulting plot depend type aba object. supported objects following: aba_emmeans aba_longpower aba_robust","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot an aba object — aba_plot","text":"","code":"aba_plot(object, ...)"},{"path":"https://ncullen93.github.io/abaR/reference/aba_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot an aba object — aba_plot","text":"object aba object. object plot. ... additional parameters","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot an aba object — aba_plot","text":"ggplot plotted results depending aba object.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_plot_coef.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot coefficients of an aba model summary — aba_plot_coef","title":"Plot coefficients of an aba model summary — aba_plot_coef","text":"Plot coefficients aba model summary","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_plot_coef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot coefficients of an aba model summary — aba_plot_coef","text":"","code":"aba_plot_coef(   model_summary,   term_labels = NULL,   axis = c(\"term\", \"predictor\", \"outcome\", \"group\"),   coord_flip = FALSE,   include_covariates = TRUE,   sort = FALSE,   facet_labels = TRUE,   facet_axis = TRUE,   palette = c(\"jama\", \"nature\", \"lancet\", \"none\"),   plotly = FALSE )"},{"path":"https://ncullen93.github.io/abaR/reference/aba_plot_coef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot coefficients of an aba model summary — aba_plot_coef","text":"model_summary aba model summary. object plot - result aba_summary() call. term_labels list. list name equal term variable value equal label want replace plot. Useful exchange variable names labels. Rememeber terms data variables/columns make predictors. axis string. Specifies x axis variable, color/fill variable, facet variable order. vector length three includes \"predictor\", \"outcome\", \"group\" values. coord_flip logical. Whether flip x y axes. can useful large amount predictor sets want view metrics vertically. include_covariates logical. Whether include covariates sort logical. Whether sort axis labels coefficient value facet_labels logical. Whether include facet labels. facet_axis logical. Whether keep axis segment/labels facets whether remove facets. palette string. ggpubr palette use. See ggpubr::set_palette. plotly logical. Whether use plot.ly instead standard ggplot. Defaults false. Using ggplotly can useful want interactivity web pages.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_plot_coef.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot coefficients of an aba model summary — aba_plot_coef","text":"ggplot specified aba model summary coefficients","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_plot_coef.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot coefficients of an aba model summary — aba_plot_coef","text":"","code":"# fit aba model model <- aba_model() %>%   set_data(adnimerge %>% dplyr::filter(VISCODE == 'bl')) %>%   set_groups(everyone()) %>%   set_outcomes(ConvertedToAlzheimers, CSF_ABETA_STATUS_bl,                .labels=c('Conversion to AD', 'CSF Abeta Status')) %>%   set_predictors(     PLASMA_ABETA_bl, PLASMA_PTAU181_bl, PLASMA_NFL_bl,     c(PLASMA_ABETA_bl, PLASMA_PTAU181_bl, PLASMA_NFL_bl),     .labels = c('A','T','N','ATN')   ) %>%   set_stats(stat_glm(std.beta=TRUE)) %>%   fit() #> Warning: 'length(x) = 4 > 1' in coercion to 'logical(1)' #> [1] \"ConvertedToAlzheimers ~ PLASMA_ABETA_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_PTAU181_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_ABETA_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_PTAU181_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\"  # summarise aba model to calculate metrics model_summary <- model %>% aba_summary()  # plot the coefficients using default coef_plot <- model_summary %>% aba_plot_coef(coord_flip = TRUE)  # add term labels term_labels <- list(   'PLASMA_ABETA_bl' = 'Plasma Abeta',   'PLASMA_PTAU181_bl' = 'Plasma P-tau',   'PLASMA_NFL_bl' = 'Plasma NfL' ) coef_plot2 <- model_summary %>% aba_plot_coef(coord_flip = TRUE,                                               term_labels = term_labels)  # compare predictor coefficients across outcomes coef_plot3 <- model_summary %>%   aba_plot_coef(     axis = c('outcome', 'predictor','term','group'), coord_flip=TRUE   )"},{"path":"https://ncullen93.github.io/abaR/reference/aba_plot_metric.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot metrics of an aba model summary — aba_plot_metric","title":"Plot metrics of an aba model summary — aba_plot_metric","text":"Plot metrics aba model summary","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_plot_metric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot metrics of an aba model summary — aba_plot_metric","text":"","code":"aba_plot_metric(   model_summary,   metric = NULL,   axis = c(\"predictor\", \"outcome\", \"group\"),   coord_flip = FALSE,   include_basic = TRUE,   sort = FALSE,   facet_labels = TRUE,   palette = \"jama\",   plotly = FALSE )"},{"path":"https://ncullen93.github.io/abaR/reference/aba_plot_metric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot metrics of an aba model summary — aba_plot_metric","text":"model_summary aba model summary. object plot - result aba_summary() call. metric string. metric plot. axis string. Specifies x axis variable, color/fill variable, facet variable order. vector length three includes \"predictor\", \"outcome\", \"group\" values. coord_flip logical. Whether flip x y axes. can useful large amount predictor sets want view metrics vertically. include_basic logical. Whether include basic predictor. sort logical. Whether sort axis labels metric value facet_labels logical. Whether include facet labels . palette string. ggpubr palette use. See ggpubr::set_palette. plotly logical. Whether use plot.ly instead standard ggplot. Defaults false. Using ggplotly can useful want interactivity web pages.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_plot_metric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot metrics of an aba model summary — aba_plot_metric","text":"ggplot specified aba model summary metric.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_plot_metric.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot metrics of an aba model summary — aba_plot_metric","text":"","code":"# fit aba model model <- aba_model() %>%   set_data(adnimerge %>% dplyr::filter(VISCODE == 'bl')) %>%   set_groups(everyone()) %>%   set_outcomes(ConvertedToAlzheimers, CSF_ABETA_STATUS_bl,                .labels=c('Conversion to AD', 'CSF Abeta Status')) %>%   set_predictors(     PLASMA_ABETA_bl, PLASMA_PTAU181_bl, PLASMA_NFL_bl,     c(PLASMA_ABETA_bl, PLASMA_PTAU181_bl, PLASMA_NFL_bl),     .labels = c('A','T','N','ATN')   ) %>%   set_stats(stat_glm(std.beta=TRUE)) %>%   fit() #> Warning: 'length(x) = 4 > 1' in coercion to 'logical(1)' #> [1] \"ConvertedToAlzheimers ~ PLASMA_ABETA_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_PTAU181_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_ABETA_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_PTAU181_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\"  # summarise aba model to calculate metrics model_summary <- model %>% aba_summary()  # plot the metrics using default (defaults to AUC) metric_plot <- model_summary %>% aba_plot_metric()  # coord flip metric_plot2 <- model_summary %>% aba_plot_metric(coord_flip=TRUE)  # compare predictor sets within each outcome instead of the opposite metric_plot3 <- model_summary %>%   aba_plot_metric(axis = c('outcome','predictor', 'group'))"},{"path":"https://ncullen93.github.io/abaR/reference/aba_plot_predictor_risk.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot predictor values versus predicted risk from fitted aba model — aba_plot_predictor_risk","title":"Plot predictor values versus predicted risk from fitted aba model — aba_plot_predictor_risk","text":"function plots real predictor values versus predicted risk (either absolute relative) fitted aba model glm stats.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_plot_predictor_risk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot predictor values versus predicted risk from fitted aba model — aba_plot_predictor_risk","text":"","code":"aba_plot_predictor_risk(model, term_labels = NULL)"},{"path":"https://ncullen93.github.io/abaR/reference/aba_plot_predictor_risk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot predictor values versus predicted risk from fitted aba model — aba_plot_predictor_risk","text":"model fitted abaModel. model plot term_labels list. Names values predictors labels replace plot.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_plot_predictor_risk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot predictor values versus predicted risk from fitted aba model — aba_plot_predictor_risk","text":"ggplot","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_plot_predictor_risk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot predictor values versus predicted risk from fitted aba model — aba_plot_predictor_risk","text":"","code":"data <- adnimerge %>% dplyr::filter(VISCODE == 'bl') # fit glm model with binary outcome variables model <- data %>% aba_model() %>%   set_groups(everyone()) %>%   set_outcomes(CSF_ABETA_STATUS_bl) %>%   set_predictors(     c(PLASMA_ABETA_bl, PLASMA_PTAU181_bl, PLASMA_NFL_bl)   ) %>%   set_stats(     stat_glm(std.beta = FALSE)   ) %>%   fit() #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" g <- model %>% aba_plot_predictor_risk()"},{"path":"https://ncullen93.github.io/abaR/reference/aba_plot_risk_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot risk density split by binary outcome class — aba_plot_risk_density","title":"Plot risk density split by binary outcome class — aba_plot_risk_density","text":"function plots risk density curves across group - outcome - stat combinations split binary outcome. currently supports stat_glm.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_plot_risk_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot risk density split by binary outcome class — aba_plot_risk_density","text":"","code":"aba_plot_risk_density(   model,   risk_type = c(\"absolute\", \"relative\"),   drop_basic = FALSE )"},{"path":"https://ncullen93.github.io/abaR/reference/aba_plot_risk_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot risk density split by binary outcome class — aba_plot_risk_density","text":"model abaModel. fitted aba model stat_glm type. risk_type string. Whether use absolute relative risk. drop_basic logical. Whether drop basic model .","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_plot_risk_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot risk density split by binary outcome class — aba_plot_risk_density","text":"ggplot risk density curves split binary outcome value.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_plot_risk_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot risk density split by binary outcome class — aba_plot_risk_density","text":"","code":"data <- adnimerge %>% dplyr::filter(VISCODE == 'bl')  # fit glm model with binary outcome variables model <- data %>% aba_model() %>%   set_groups(everyone()) %>%   set_outcomes(ConvertedToAlzheimers, CSF_ABETA_STATUS_bl) %>%   set_predictors(     PLASMA_ABETA_bl, PLASMA_PTAU181_bl, PLASMA_NFL_bl,     c(PLASMA_ABETA_bl, PLASMA_PTAU181_bl, PLASMA_NFL_bl)   ) %>%   set_stats(     stat_glm(std.beta = TRUE)   ) %>%   fit() #> [1] \"ConvertedToAlzheimers ~ PLASMA_ABETA_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_PTAU181_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_ABETA_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_PTAU181_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\"  fig <- model %>% aba_plot_risk_density()"},{"path":"https://ncullen93.github.io/abaR/reference/aba_plot_roc.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot ROC curves from an aba model — aba_plot_roc","title":"Plot ROC curves from an aba model — aba_plot_roc","text":"function plots ROC curves across group - outcome - stat combinations currently supports stat_glm.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_plot_roc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot ROC curves from an aba model — aba_plot_roc","text":"","code":"aba_plot_roc(model, drop_facet_labels = FALSE)"},{"path":"https://ncullen93.github.io/abaR/reference/aba_plot_roc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot ROC curves from an aba model — aba_plot_roc","text":"model abaModel. fitted aba model stat_glm type. drop_facet_labels logical. Whether remove facet labels plots. facet labels tell group outcome plot. Sometimes labels unnecessary one group one outcome, want add labels another way.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_plot_roc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot ROC curves from an aba model — aba_plot_roc","text":"ggplot roc curves predictor sets across group - outcome - stat combination","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_plot_roc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot ROC curves from an aba model — aba_plot_roc","text":"","code":"data <- adnimerge %>% dplyr::filter(VISCODE == 'bl')  # fit glm model with binary outcome variables model <- data %>% aba_model() %>%   set_groups(everyone()) %>%   set_outcomes(ConvertedToAlzheimers, CSF_ABETA_STATUS_bl) %>%   set_predictors(     PLASMA_ABETA_bl, PLASMA_PTAU181_bl, PLASMA_NFL_bl,     c(PLASMA_ABETA_bl, PLASMA_PTAU181_bl, PLASMA_NFL_bl)   ) %>%   set_stats(     stat_glm(std.beta = TRUE)   ) %>%   fit() #> [1] \"ConvertedToAlzheimers ~ PLASMA_ABETA_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_PTAU181_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_ABETA_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_PTAU181_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\"  fig <- model %>% aba_plot_roc()"},{"path":"https://ncullen93.github.io/abaR/reference/aba_plot_trajectory.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot trajectories of fitted longitudinal stats — aba_plot_trajectory","title":"Plot trajectories of fitted longitudinal stats — aba_plot_trajectory","text":"level=0: group-level estimates level=1: individual-level estimates level=2: individual-level observations","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_plot_trajectory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot trajectories of fitted longitudinal stats — aba_plot_trajectory","text":"","code":"aba_plot_trajectory(model, time_vals = NULL, level = 0)"},{"path":"https://ncullen93.github.io/abaR/reference/aba_plot_trajectory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot trajectories of fitted longitudinal stats — aba_plot_trajectory","text":"level","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_predict.html","id":null,"dir":"Reference","previous_headings":"","what":"Get individual predictions from a fitted aba model — aba_predict","title":"Get individual predictions from a fitted aba model — aba_predict","text":"function allows get fitted/predicted values data used fit aba model new data. essentially extension broom::augment() function.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_predict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get individual predictions from a fitted aba model — aba_predict","text":"","code":"aba_predict(model, newdata = NULL, merge = TRUE, augment = FALSE)"},{"path":"https://ncullen93.github.io/abaR/reference/aba_predict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get individual predictions from a fitted aba model — aba_predict","text":"model fitted aba model. model get predictions . newdata dataframe (optional). New data get predictions . null, predictions provided data originally used fit aba model merge logical. Whether merge predictions original dataset store predictions group - outcome - stat combo dataframe separately. augment logical. Whether include original data predictions.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_predict.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get individual predictions from a fitted aba model — aba_predict","text":"dataframe original data fitted/predicted values added group-outcome-stat-predictor combination.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_predict.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get individual predictions from a fitted aba model — aba_predict","text":"","code":"data <- adnimerge %>% dplyr::filter(VISCODE == 'bl')  model <- data %>% aba_model() %>%   set_groups(     everyone(),     DX_bl %in% c('MCI', 'AD')   ) %>%   set_outcomes(CDRSB_bl, MMSE_bl) %>%   set_predictors(     PLASMA_PTAU181_bl, PLASMA_NFL_bl,     c(PLASMA_PTAU181_bl, PLASMA_NFL_bl)   ) %>%   set_covariates(AGE, GENDER, EDUCATION) %>%   set_stats('lm')  model <- model %>% fit() #> [1] \"CDRSB_bl ~ AGE + GENDER + EDUCATION\" #> [1] \"CDRSB_bl ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl\" #> [1] \"CDRSB_bl ~ AGE + GENDER + EDUCATION + PLASMA_NFL_bl\" #> [1] \"CDRSB_bl ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"MMSE_bl ~ AGE + GENDER + EDUCATION\" #> [1] \"MMSE_bl ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl\" #> [1] \"MMSE_bl ~ AGE + GENDER + EDUCATION + PLASMA_NFL_bl\" #> [1] \"MMSE_bl ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"CDRSB_bl ~ AGE + GENDER + EDUCATION\" #> [1] \"CDRSB_bl ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl\" #> [1] \"CDRSB_bl ~ AGE + GENDER + EDUCATION + PLASMA_NFL_bl\" #> [1] \"CDRSB_bl ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"MMSE_bl ~ AGE + GENDER + EDUCATION\" #> [1] \"MMSE_bl ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl\" #> [1] \"MMSE_bl ~ AGE + GENDER + EDUCATION + PLASMA_NFL_bl\" #> [1] \"MMSE_bl ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl + PLASMA_NFL_bl\"  # add model predictions to original data data_augmented <- model %>% aba_predict()  # store predictions separately by group - outcome - stat combination data_augmented2 <- model %>% aba_predict(merge = FALSE)"},{"path":"https://ncullen93.github.io/abaR/reference/aba_read.html","id":null,"dir":"Reference","previous_headings":"","what":"Read an aba object from file — aba_read","title":"Read an aba object from file — aba_read","text":"function allows read back memory aba object previously saved. function relevant loading results tables can just use read.csv read_excel like. Note function essential just wraps readRDS reading Rda object.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_read.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read an aba object from file — aba_read","text":"","code":"aba_read(filename)"},{"path":"https://ncullen93.github.io/abaR/reference/aba_read.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read an aba object from file — aba_read","text":"filename string. filename aba object saved.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_read.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read an aba object from file — aba_read","text":"aba object","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_read.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read an aba object from file — aba_read","text":"","code":"# create temp files to save to tmp_filename_rda <- tempfile(fileext = '.Rda')  # grab built-in data data <- adnimerge %>% dplyr::filter(VISCODE == 'bl')  # fit a standard aba model model <- data %>% aba_model() %>%   set_groups(everyone()) %>%   set_outcomes(ConvertedToAlzheimers, CSF_ABETA_STATUS_bl) %>%   set_predictors(     PLASMA_ABETA_bl, PLASMA_PTAU181_bl, PLASMA_NFL_bl,     c(PLASMA_ABETA_bl, PLASMA_PTAU181_bl, PLASMA_NFL_bl)   ) %>%   set_stats('glm') %>%   fit() #> [1] \"ConvertedToAlzheimers ~ PLASMA_ABETA_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_PTAU181_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_ABETA_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_PTAU181_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\"  # create a model summary model_summary <- model %>% aba_summary()  # save model summary as an object which can be loaded back into memory model_summary %>% aba_write(tmp_filename_rda, format = 'object')  # load summary back to file to show it works model_summary2 <- aba_read(tmp_filename_rda)  # delete temp files removed <- file.remove(tmp_filename_rda)"},{"path":"https://ncullen93.github.io/abaR/reference/aba_robust.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate the robustness of an aba model to systematic and random error. — aba_robust","title":"Evaluate the robustness of an aba model to systematic and random error. — aba_robust","text":"function allows test adding bias predictor values adding random error predictor values affects model coefficients performance metrics (e.g., AUC, R2, etc) result. function useful test-retest estimates biomarkers want test effect diagnostic prognostic modelling.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_robust.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate the robustness of an aba model to systematic and random error. — aba_robust","text":"","code":"aba_robust(model, bias = NULL, variation = NULL, ntrials = 100, verbose = TRUE)"},{"path":"https://ncullen93.github.io/abaR/reference/aba_robust.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate the robustness of an aba model to systematic and random error. — aba_robust","text":"model aba model. fitted aba model perform robustness analysis . bias double list doubles. one value given, percent value added subtracted predictor values trial. list, names list predictors apply bias values bias apply predictor. variation double list doubles. percent value represents standard deviation normal distribution. random error values randomly sampled normal distribution data row (participant) trial. ntrials integer. Number trials run. trial represents different random sampling variation distribution. effect bias bias value always . verbose logical. Whether include progress bar track trials.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_robust.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate the robustness of an aba model to systematic and random error. — aba_robust","text":"abaRobust object contains results robustness analysis displays model coefficients metrics changed bias variation injected predictors.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_robust.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate the robustness of an aba model to systematic and random error. — aba_robust","text":"","code":"# read and process data data <- adnimerge %>% dplyr::filter(VISCODE == 'bl')  # fit a standard model to predict a binary outcome model <- data %>% aba_model() %>%   set_groups(everyone()) %>%   set_outcomes(CSF_ABETA_STATUS_bl) %>%   set_predictors(PLASMA_PTAU181_bl, PLASMA_NFL_bl) %>%   set_stats(stat_roc(method='Youden', direction = '<')) %>%   aba_fit()  # summarise model (these are the original results) model_summary <- model %>% aba_summary()  # specify test-retest variation for predictors (defined as percent change) # this can be theoretical values (e.g. 5, 10, 15, 20) or derived from # test-retest studies where you measured the biomarkers twice variation <- list(   'PLASMA_PTAU181_bl' = 9.5,   'PLASMA_NFL_bl' = 20.2 )  # test robustness of the fitted aba model to this robustness model_robust <- model %>%   aba_robust(     variation = variation,     ntrials = 10,     verbose = TRUE   )  # plot results using the generic plot function fig <- model_robust %>% aba_plot_metric()"},{"path":"https://ncullen93.github.io/abaR/reference/aba_screen.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an aba screen object. — aba_screen","title":"Create an aba screen object. — aba_screen","text":"function runs clinical trial screening analysis based fitted aba model glm stats. can supply different inclusion thresholds represent predicted probabilities glm stats, can also supply cost multipliers required sample size order perform cost-benefit analysis. analysis uses bootstrap sampling generate confidence intervals.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_screen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an aba screen object. — aba_screen","text":"","code":"aba_screen(   model,   threshold,   cost_multiplier,   include_n,   risk_type = c(\"relative\", \"absolute\"),   ntrials = 100,   verbose = TRUE )"},{"path":"https://ncullen93.github.io/abaR/reference/aba_screen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an aba screen object. — aba_screen","text":"model aba model. fitted aba model want use screening algorithm. threshold double vector doubles 0 1. threshold represents percentage individuals invited take inclusion test. Note threshold value calculated relative manner based values data population, based absolute risk value. cost_multiplier double vector doubles. cost multiplier represents much expensive perform main inclusion test versus screening test. Larger values mean main inclusion test/biomarker much expensive screening test therefore result larger cost savings using screening model identify individuals low risk positive main inclusion test. include_n integer. number participants expect included clinical trial. therefore number individuals must pass screening test must pass main inclusion test risk_type string ('relative' 'absolute'). Whether treat threshold relative risk population used fit model (.e. relative) absolute risk based predicted values statistical model (.e. absolute). ntrials integer. number bootstrap trials run order generate confidence interval verbose logical. Whether show progress bar trial.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_screen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an aba screen object. — aba_screen","text":"abaScreen object","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_screen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an aba screen object. — aba_screen","text":"","code":"# use built-in data df <- adnimerge %>% dplyr::filter(VISCODE == 'bl')  # first, fit an aba model to predict amyloid PET status from plasma markers # In this scenario, PET is the \"inclusion\" marker and plasma is the # \"screening\" marker. PET is expensive and plasma is cheap, so we want to # use plasma markers to decide who should undergo PET scans in order to # minimize the risk of negative (i.e., wasted) PET scans. model <- df %>% aba_model() %>%   set_outcomes(PET_ABETA_STATUS_bl) %>%   set_predictors(     PLASMA_PTAU181_bl, PLASMA_NFL_bl,     c(PLASMA_PTAU181_bl, PLASMA_NFL_bl)   ) %>%   set_covariates(AGE, GENDER, EDUCATION) %>%   set_stats('glm') %>%   fit() #> [1] \"PET_ABETA_STATUS_bl ~ AGE + GENDER + EDUCATION\" #> [1] \"PET_ABETA_STATUS_bl ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl\" #> [1] \"PET_ABETA_STATUS_bl ~ AGE + GENDER + EDUCATION + PLASMA_NFL_bl\" #> [1] \"PET_ABETA_STATUS_bl ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl + PLASMA_NFL_bl\"  # summarise the model just to show the plasma biomarkers do in fact # provide some predictive value for amyloid PET status model_summary <- model %>% aba_summary()  # Run the screening analysis while varying the inclusion threshold from # 25% to 75% (this is the percent of individuals who will be invited for # the PET scan) and varying the cost multiplier from 4 to 16 (this is how # much more PET costs compared to plasma) and assuming we want to recruit # 1000 amyloid PET positive subjects. model_screen <- model %>%   aba_screen(     threshold = seq(0.25, 0.75, by = 0.1),     cost_multiplier = c(4, 8, 16),     include_n = 1000,     ntrials = 5,     verbose = TRUE   )"},{"path":"https://ncullen93.github.io/abaR/reference/aba_selection.html","id":null,"dir":"Reference","previous_headings":"","what":"Run model selection on an aba model. — aba_selection","title":"Run model selection on an aba model. — aba_selection","text":"function allows run model selection fitted aba model. function supports forward backward selection algorithms, AIC p-value selection criteria, arbitrary thresholds.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_selection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run model selection on an aba model. — aba_selection","text":"","code":"aba_selection(   model,   method = c(\"forward\", \"backward\"),   criteria = c(\"aic\", \"pval\"),   threshold = NULL,   verbose = FALSE )"},{"path":"https://ncullen93.github.io/abaR/reference/aba_selection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run model selection on an aba model. — aba_selection","text":"model abaModel. fitted aba model run selection . method string. selection algorithm use (forward backward). criteria string. metric use selecting next model (aic pval). threshold numeric. threshold use selected metric (defaults -2 aic; defaults 0.1 pval). verbose logical. Whether print results selection round.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_selection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run model selection on an aba model. — aba_selection","text":"abaSelection object contains model summary information coefficients metrics selection round across different groups/outcomes/stats.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_selection.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run model selection on an aba model. — aba_selection","text":"Forward selection starts covariates-tests addition predictor sets individually, adds predictor set improves model criteria . Backward selection starts inclusion covariates + predictor sets tests removal predictor sets individually, removes predictor set improves model criteria . predictor sets whose addition/removal results improvement selected criteria value least good selected threshold, selection stops current model frozen. Also, note model selection procedure run separately group - outcome - stat combination.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_selection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run model selection on an aba model. — aba_selection","text":"","code":"df <- aba::adnimerge %>% dplyr::filter(VISCODE == 'bl')  # standard model selection model <- df %>% aba_model() %>%   set_outcomes(ConvertedToAlzheimers) %>%   set_predictors(     CDRSB_bl, ADAS13_bl, MMSE_bl,     CSF_ABETA_bl, CSF_PTAU_bl, CSF_TAU_bl,     PLASMA_ABETA_bl, PLASMA_PTAU181_bl, PLASMA_NFL_bl,     MRI_HIPP_bl,     PET_ABETA_bl   ) %>%   set_covariates(AGE, GENDER, EDUCATION) %>%   set_stats('glm') %>%   aba_fit() #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CDRSB_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + MMSE_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CSF_ABETA_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CSF_PTAU_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CSF_TAU_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + PLASMA_ABETA_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + PET_ABETA_bl\"  model_summary <- model %>% aba_summary()  # default selection - forward selection by AIC with threshold = -2 # \\donttest{ model_selection <- model %>% aba_selection(verbose=TRUE) #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CDRSB_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + MMSE_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CSF_ABETA_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CSF_PTAU_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CSF_TAU_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + PLASMA_ABETA_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + PET_ABETA_bl\" #> Round:  1  #> Improvement:  ADAS13_bl  #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + CDRSB_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MMSE_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + CSF_ABETA_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + CSF_PTAU_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + CSF_TAU_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + PLASMA_ABETA_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + PLASMA_PTAU181_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + PET_ABETA_bl\" #> Round:  2  #> Improvement:  MRI_HIPP_bl  #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl + CDRSB_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl + MMSE_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl + CSF_ABETA_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl + CSF_PTAU_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl + CSF_TAU_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl + PLASMA_ABETA_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl + PLASMA_PTAU181_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl + PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl + PET_ABETA_bl\" #> Round:  3  #> Improvement:  CDRSB_bl  #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl + CDRSB_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl + CDRSB_bl + MMSE_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl + CDRSB_bl + CSF_ABETA_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl + CDRSB_bl + CSF_PTAU_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl + CDRSB_bl + CSF_TAU_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl + CDRSB_bl + PLASMA_ABETA_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl + CDRSB_bl + PLASMA_PTAU181_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl + CDRSB_bl + PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl + CDRSB_bl + PET_ABETA_bl\" #> Round:  4  #> Improvement:  PLASMA_NFL_bl  #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl + CDRSB_bl + PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl + CDRSB_bl + PLASMA_NFL_bl + MMSE_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl + CDRSB_bl + PLASMA_NFL_bl + CSF_ABETA_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl + CDRSB_bl + PLASMA_NFL_bl + CSF_PTAU_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl + CDRSB_bl + PLASMA_NFL_bl + CSF_TAU_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl + CDRSB_bl + PLASMA_NFL_bl + PLASMA_ABETA_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl + CDRSB_bl + PLASMA_NFL_bl + PLASMA_PTAU181_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl + CDRSB_bl + PLASMA_NFL_bl + PET_ABETA_bl\" #> Round:  5  #> No improvement - stopping # } # selection with p-value and threshold = 0.1 # \\donttest{ model_selection <- model %>%   aba_selection(criteria = 'pval', threshold=0.1, verbose=TRUE) #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CDRSB_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + MMSE_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CSF_ABETA_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CSF_PTAU_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CSF_TAU_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + PLASMA_ABETA_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + PET_ABETA_bl\" #> Round:  1  #> Improvement:  ADAS13_bl  #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + CDRSB_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MMSE_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + CSF_ABETA_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + CSF_PTAU_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + CSF_TAU_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + PLASMA_ABETA_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + PLASMA_PTAU181_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + PET_ABETA_bl\" #> Round:  2  #> Improvement:  MRI_HIPP_bl  #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl + CDRSB_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl + MMSE_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl + CSF_ABETA_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl + CSF_PTAU_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl + CSF_TAU_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl + PLASMA_ABETA_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl + PLASMA_PTAU181_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl + PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl + PET_ABETA_bl\" #> Round:  3  #> Improvement:  CDRSB_bl  #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl + CDRSB_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl + CDRSB_bl + MMSE_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl + CDRSB_bl + CSF_ABETA_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl + CDRSB_bl + CSF_PTAU_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl + CDRSB_bl + CSF_TAU_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl + CDRSB_bl + PLASMA_ABETA_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl + CDRSB_bl + PLASMA_PTAU181_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl + CDRSB_bl + PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl + CDRSB_bl + PET_ABETA_bl\" #> Round:  4  #> Improvement:  PLASMA_NFL_bl  #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl + CDRSB_bl + PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl + CDRSB_bl + PLASMA_NFL_bl + MMSE_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl + CDRSB_bl + PLASMA_NFL_bl + CSF_ABETA_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl + CDRSB_bl + PLASMA_NFL_bl + CSF_PTAU_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl + CDRSB_bl + PLASMA_NFL_bl + CSF_TAU_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl + CDRSB_bl + PLASMA_NFL_bl + PLASMA_ABETA_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl + CDRSB_bl + PLASMA_NFL_bl + PLASMA_PTAU181_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl + CDRSB_bl + PLASMA_NFL_bl + PET_ABETA_bl\" #> Round:  5  #> Improvement:  PLASMA_PTAU181_bl  #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl + CDRSB_bl + PLASMA_NFL_bl + PLASMA_PTAU181_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl + CDRSB_bl + PLASMA_NFL_bl + PLASMA_PTAU181_bl + MMSE_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl + CDRSB_bl + PLASMA_NFL_bl + PLASMA_PTAU181_bl + CSF_ABETA_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl + CDRSB_bl + PLASMA_NFL_bl + PLASMA_PTAU181_bl + CSF_PTAU_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl + CDRSB_bl + PLASMA_NFL_bl + PLASMA_PTAU181_bl + CSF_TAU_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl + CDRSB_bl + PLASMA_NFL_bl + PLASMA_PTAU181_bl + PLASMA_ABETA_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + ADAS13_bl + MRI_HIPP_bl + CDRSB_bl + PLASMA_NFL_bl + PLASMA_PTAU181_bl + PET_ABETA_bl\" #> Round:  6  #> No improvement - stopping # } # selection by group model2 <- model %>%   set_predictors(     c(CDRSB_bl,ADAS13_bl,MMSE_bl),     c(CSF_ABETA_bl,CSF_PTAU_bl,CSF_TAU_bl),     c(PLASMA_ABETA_bl, PLASMA_PTAU181_bl, PLASMA_NFL_bl),     c(MRI_HIPP_bl),     c(PET_ABETA_bl)   ) %>%   aba_fit() #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CDRSB_bl + ADAS13_bl + MMSE_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CSF_ABETA_bl + CSF_PTAU_bl + CSF_TAU_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + PET_ABETA_bl\"  model_summary2 <- model2 %>% aba_summary()  # \\donttest{ model_selection2 <- model2 %>%   aba_selection(criteria='pval', threshold=0.1, verbose=TRUE) #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CDRSB_bl + ADAS13_bl + MMSE_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CSF_ABETA_bl + CSF_PTAU_bl + CSF_TAU_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + PET_ABETA_bl\" #> Round:  1  #> Improvement:  CDRSB_bl ADAS13_bl MMSE_bl  #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CDRSB_bl + ADAS13_bl + MMSE_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CDRSB_bl + ADAS13_bl + MMSE_bl + CSF_ABETA_bl + CSF_PTAU_bl + CSF_TAU_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CDRSB_bl + ADAS13_bl + MMSE_bl + PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CDRSB_bl + ADAS13_bl + MMSE_bl + MRI_HIPP_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CDRSB_bl + ADAS13_bl + MMSE_bl + PET_ABETA_bl\" #> Round:  2  #> Improvement:  MRI_HIPP_bl  #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CDRSB_bl + ADAS13_bl + MMSE_bl + MRI_HIPP_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CDRSB_bl + ADAS13_bl + MMSE_bl + MRI_HIPP_bl + CSF_ABETA_bl + CSF_PTAU_bl + CSF_TAU_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CDRSB_bl + ADAS13_bl + MMSE_bl + MRI_HIPP_bl + PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CDRSB_bl + ADAS13_bl + MMSE_bl + MRI_HIPP_bl + PET_ABETA_bl\" #> Round:  3  #> Improvement:  PLASMA_ABETA_bl PLASMA_PTAU181_bl PLASMA_NFL_bl  #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CDRSB_bl + ADAS13_bl + MMSE_bl + MRI_HIPP_bl + PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CDRSB_bl + ADAS13_bl + MMSE_bl + MRI_HIPP_bl + PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl + CSF_ABETA_bl + CSF_PTAU_bl + CSF_TAU_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CDRSB_bl + ADAS13_bl + MMSE_bl + MRI_HIPP_bl + PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl + PET_ABETA_bl\" #> Round:  4  #> No improvement - stopping # }  # add more outcomes model3 <- model2 %>%   set_outcomes(ConvertedToAlzheimers, ConvertedToDementia) %>%   aba_fit() #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CDRSB_bl + ADAS13_bl + MMSE_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CSF_ABETA_bl + CSF_PTAU_bl + CSF_TAU_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + PET_ABETA_bl\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + CDRSB_bl + ADAS13_bl + MMSE_bl\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + CSF_ABETA_bl + CSF_PTAU_bl + CSF_TAU_bl\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + PET_ABETA_bl\"  # \\donttest{ model_selection3 <- model3 %>%   aba_selection(criteria='pval', threshold=0.1, verbose=TRUE) #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CDRSB_bl + ADAS13_bl + MMSE_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CSF_ABETA_bl + CSF_PTAU_bl + CSF_TAU_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + PET_ABETA_bl\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + CDRSB_bl + ADAS13_bl + MMSE_bl\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + CSF_ABETA_bl + CSF_PTAU_bl + CSF_TAU_bl\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + PET_ABETA_bl\" #> Round:  1  #> Improvement:  CDRSB_bl ADAS13_bl MMSE_bl  #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CDRSB_bl + ADAS13_bl + MMSE_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CDRSB_bl + ADAS13_bl + MMSE_bl + CSF_ABETA_bl + CSF_PTAU_bl + CSF_TAU_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CDRSB_bl + ADAS13_bl + MMSE_bl + PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CDRSB_bl + ADAS13_bl + MMSE_bl + MRI_HIPP_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CDRSB_bl + ADAS13_bl + MMSE_bl + PET_ABETA_bl\" #> Improvement:  MRI_HIPP_bl  #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl + CDRSB_bl + ADAS13_bl + MMSE_bl\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl + CSF_ABETA_bl + CSF_PTAU_bl + CSF_TAU_bl\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl + PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl + PET_ABETA_bl\" #> Round:  2  #> Improvement:  MRI_HIPP_bl  #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CDRSB_bl + ADAS13_bl + MMSE_bl + MRI_HIPP_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CDRSB_bl + ADAS13_bl + MMSE_bl + MRI_HIPP_bl + CSF_ABETA_bl + CSF_PTAU_bl + CSF_TAU_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CDRSB_bl + ADAS13_bl + MMSE_bl + MRI_HIPP_bl + PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CDRSB_bl + ADAS13_bl + MMSE_bl + MRI_HIPP_bl + PET_ABETA_bl\" #> Improvement:  CDRSB_bl ADAS13_bl MMSE_bl  #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl + CDRSB_bl + ADAS13_bl + MMSE_bl\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl + CDRSB_bl + ADAS13_bl + MMSE_bl + CSF_ABETA_bl + CSF_PTAU_bl + CSF_TAU_bl\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl + CDRSB_bl + ADAS13_bl + MMSE_bl + PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl + CDRSB_bl + ADAS13_bl + MMSE_bl + PET_ABETA_bl\" #> Round:  3  #> Improvement:  PLASMA_ABETA_bl PLASMA_PTAU181_bl PLASMA_NFL_bl  #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CDRSB_bl + ADAS13_bl + MMSE_bl + MRI_HIPP_bl + PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CDRSB_bl + ADAS13_bl + MMSE_bl + MRI_HIPP_bl + PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl + CSF_ABETA_bl + CSF_PTAU_bl + CSF_TAU_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CDRSB_bl + ADAS13_bl + MMSE_bl + MRI_HIPP_bl + PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl + PET_ABETA_bl\" #> Improvement:  PLASMA_ABETA_bl PLASMA_PTAU181_bl PLASMA_NFL_bl  #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl + CDRSB_bl + ADAS13_bl + MMSE_bl + PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl + CDRSB_bl + ADAS13_bl + MMSE_bl + PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl + CSF_ABETA_bl + CSF_PTAU_bl + CSF_TAU_bl\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl + CDRSB_bl + ADAS13_bl + MMSE_bl + PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl + PET_ABETA_bl\" #> Round:  4  #> No improvement - stopping #> No improvement - stopping # }  # add more groups model4 <- model3 %>%   set_groups(everyone(), DX_bl %in% c('MCI','AD')) %>%   aba_fit() #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CDRSB_bl + ADAS13_bl + MMSE_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CSF_ABETA_bl + CSF_PTAU_bl + CSF_TAU_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + PET_ABETA_bl\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + CDRSB_bl + ADAS13_bl + MMSE_bl\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + CSF_ABETA_bl + CSF_PTAU_bl + CSF_TAU_bl\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + PET_ABETA_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CDRSB_bl + ADAS13_bl + MMSE_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CSF_ABETA_bl + CSF_PTAU_bl + CSF_TAU_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + PET_ABETA_bl\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + CDRSB_bl + ADAS13_bl + MMSE_bl\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + CSF_ABETA_bl + CSF_PTAU_bl + CSF_TAU_bl\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + PET_ABETA_bl\"  # \\donttest{ model_selection4 <- model4 %>%   aba_selection(criteria='pval', threshold=0.1, verbose=TRUE) #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CDRSB_bl + ADAS13_bl + MMSE_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CSF_ABETA_bl + CSF_PTAU_bl + CSF_TAU_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + PET_ABETA_bl\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + CDRSB_bl + ADAS13_bl + MMSE_bl\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + CSF_ABETA_bl + CSF_PTAU_bl + CSF_TAU_bl\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + PET_ABETA_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CDRSB_bl + ADAS13_bl + MMSE_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CSF_ABETA_bl + CSF_PTAU_bl + CSF_TAU_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + PET_ABETA_bl\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + CDRSB_bl + ADAS13_bl + MMSE_bl\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + CSF_ABETA_bl + CSF_PTAU_bl + CSF_TAU_bl\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + PET_ABETA_bl\" #> Round:  1  #> Improvement:  CDRSB_bl ADAS13_bl MMSE_bl  #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CDRSB_bl + ADAS13_bl + MMSE_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CDRSB_bl + ADAS13_bl + MMSE_bl + CSF_ABETA_bl + CSF_PTAU_bl + CSF_TAU_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CDRSB_bl + ADAS13_bl + MMSE_bl + PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CDRSB_bl + ADAS13_bl + MMSE_bl + MRI_HIPP_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CDRSB_bl + ADAS13_bl + MMSE_bl + PET_ABETA_bl\" #> Improvement:  MRI_HIPP_bl  #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl + CDRSB_bl + ADAS13_bl + MMSE_bl\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl + CSF_ABETA_bl + CSF_PTAU_bl + CSF_TAU_bl\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl + PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl + PET_ABETA_bl\" #> Improvement:  MRI_HIPP_bl  #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl + CDRSB_bl + ADAS13_bl + MMSE_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl + CSF_ABETA_bl + CSF_PTAU_bl + CSF_TAU_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl + PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl + PET_ABETA_bl\" #> Improvement:  MRI_HIPP_bl  #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl + CDRSB_bl + ADAS13_bl + MMSE_bl\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl + CSF_ABETA_bl + CSF_PTAU_bl + CSF_TAU_bl\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl + PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl + PET_ABETA_bl\" #> Round:  2  #> Improvement:  MRI_HIPP_bl  #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CDRSB_bl + ADAS13_bl + MMSE_bl + MRI_HIPP_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CDRSB_bl + ADAS13_bl + MMSE_bl + MRI_HIPP_bl + CSF_ABETA_bl + CSF_PTAU_bl + CSF_TAU_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CDRSB_bl + ADAS13_bl + MMSE_bl + MRI_HIPP_bl + PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CDRSB_bl + ADAS13_bl + MMSE_bl + MRI_HIPP_bl + PET_ABETA_bl\" #> Improvement:  CDRSB_bl ADAS13_bl MMSE_bl  #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl + CDRSB_bl + ADAS13_bl + MMSE_bl\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl + CDRSB_bl + ADAS13_bl + MMSE_bl + CSF_ABETA_bl + CSF_PTAU_bl + CSF_TAU_bl\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl + CDRSB_bl + ADAS13_bl + MMSE_bl + PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl + CDRSB_bl + ADAS13_bl + MMSE_bl + PET_ABETA_bl\" #> Improvement:  CSF_ABETA_bl CSF_PTAU_bl CSF_TAU_bl  #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl + CSF_ABETA_bl + CSF_PTAU_bl + CSF_TAU_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl + CSF_ABETA_bl + CSF_PTAU_bl + CSF_TAU_bl + CDRSB_bl + ADAS13_bl + MMSE_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl + CSF_ABETA_bl + CSF_PTAU_bl + CSF_TAU_bl + PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl + CSF_ABETA_bl + CSF_PTAU_bl + CSF_TAU_bl + PET_ABETA_bl\" #> Improvement:  CSF_ABETA_bl CSF_PTAU_bl CSF_TAU_bl  #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl + CSF_ABETA_bl + CSF_PTAU_bl + CSF_TAU_bl\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl + CSF_ABETA_bl + CSF_PTAU_bl + CSF_TAU_bl + CDRSB_bl + ADAS13_bl + MMSE_bl\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl + CSF_ABETA_bl + CSF_PTAU_bl + CSF_TAU_bl + PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl + CSF_ABETA_bl + CSF_PTAU_bl + CSF_TAU_bl + PET_ABETA_bl\" #> Round:  3  #> Improvement:  PLASMA_ABETA_bl PLASMA_PTAU181_bl PLASMA_NFL_bl  #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CDRSB_bl + ADAS13_bl + MMSE_bl + MRI_HIPP_bl + PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CDRSB_bl + ADAS13_bl + MMSE_bl + MRI_HIPP_bl + PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl + CSF_ABETA_bl + CSF_PTAU_bl + CSF_TAU_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + CDRSB_bl + ADAS13_bl + MMSE_bl + MRI_HIPP_bl + PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl + PET_ABETA_bl\" #> Improvement:  PLASMA_ABETA_bl PLASMA_PTAU181_bl PLASMA_NFL_bl  #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl + CDRSB_bl + ADAS13_bl + MMSE_bl + PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl + CDRSB_bl + ADAS13_bl + MMSE_bl + PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl + CSF_ABETA_bl + CSF_PTAU_bl + CSF_TAU_bl\" #> [1] \"ConvertedToDementia ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl + CDRSB_bl + ADAS13_bl + MMSE_bl + PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl + PET_ABETA_bl\" #> Improvement:  PLASMA_ABETA_bl PLASMA_PTAU181_bl PLASMA_NFL_bl  #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl + CSF_ABETA_bl + CSF_PTAU_bl + CSF_TAU_bl + PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl + CSF_ABETA_bl + CSF_PTAU_bl + CSF_TAU_bl + PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl + CDRSB_bl + ADAS13_bl + MMSE_bl\" #> [1] \"ConvertedToAlzheimers ~ AGE + GENDER + EDUCATION + MRI_HIPP_bl + CSF_ABETA_bl + CSF_PTAU_bl + CSF_TAU_bl + PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl + PET_ABETA_bl\" #> No improvement - stopping #> Round:  4  #> No improvement - stopping #> No improvement - stopping #> No improvement - stopping #> Found NA - skipping # }"},{"path":"https://ncullen93.github.io/abaR/reference/aba_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise a fitted aba model. — aba_summary","title":"Summarise a fitted aba model. — aba_summary","text":"function concisely summarises coefficients metrics stat fits different group - outcome - stat combinations. primary function use want see results fitted aba model. also way generate publication-ready tables model results.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise a fitted aba model. — aba_summary","text":"","code":"aba_summary(   object,   control = aba_control(),   adjust = aba_adjust(),   verbose = FALSE )"},{"path":"https://ncullen93.github.io/abaR/reference/aba_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise a fitted aba model. — aba_summary","text":"object abaModel. fitted aba model want summarise. control abaControl. aba control object allows users customize summary process -- e.g., whether include covariates table. adjust abaAdjust. aba adjust object allows users specify p-value adjustment using variety methods across arbitrary model factors. verbose logical. Whether provide progress bar track status.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise a fitted aba model. — aba_summary","text":"abaSummary object contains coefficients metrics different statistical fits summarised publication-ready tables.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise a fitted aba model. — aba_summary","text":"","code":"# use built-in data data <- adnimerge %>% dplyr::filter(VISCODE == 'bl')  # fit an aba model model <- data %>% aba_model() %>%   set_groups(everyone()) %>%   set_outcomes(PET_ABETA_STATUS_bl) %>%   set_predictors(     PLASMA_PTAU181_bl,     PLASMA_NFL_bl,     c(PLASMA_PTAU181_bl, PLASMA_NFL_bl)   ) %>%   set_covariates(AGE, GENDER, EDUCATION) %>%   set_stats('glm') %>%   fit() #> [1] \"PET_ABETA_STATUS_bl ~ AGE + GENDER + EDUCATION\" #> [1] \"PET_ABETA_STATUS_bl ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl\" #> [1] \"PET_ABETA_STATUS_bl ~ AGE + GENDER + EDUCATION + PLASMA_NFL_bl\" #> [1] \"PET_ABETA_STATUS_bl ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl + PLASMA_NFL_bl\"  # default aba summary model_summary <- model %>% aba_summary()  # create an aba control object to customize the summary my_control <- aba_control(include_covariates = FALSE)  # summarise model with th custom aba control - notice covariates # wont be included in the tables when you print the summary to console model_summary2 <- model %>% aba_summary(control = my_control)"},{"path":"https://ncullen93.github.io/abaR/reference/aba_trajectory.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate longitudinal trajectories from aba model — aba_trajectory","title":"Calculate longitudinal trajectories from aba model — aba_trajectory","text":"Note: works longitudinal stats","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_trajectory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate longitudinal trajectories from aba model — aba_trajectory","text":"","code":"aba_trajectory(   model,   time_vals = NULL,   predictor_mode = \"mean\",   covariate_mode = \"mean\",   level = 0 )"},{"path":"https://ncullen93.github.io/abaR/reference/aba_trajectory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate longitudinal trajectories from aba model — aba_trajectory","text":"level","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_write.html","id":null,"dir":"Reference","previous_headings":"","what":"Write an aba object to file. — aba_write","title":"Write an aba object to file. — aba_write","text":"generic function writing aba object file. Objects can written file \"table\" (formatted), \"raw\" (long-form results), \"object\" (actual aba object).","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_write.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write an aba object to file. — aba_write","text":"","code":"aba_write(   object,   filename,   format = c(\"table\", \"raw\", \"object\", \"raw_custom\"),   split = FALSE )"},{"path":"https://ncullen93.github.io/abaR/reference/aba_write.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write an aba object to file. — aba_write","text":"object aba object. object save file. filename string. filename save . Supported extensions include \"csv\", \"xls\", \"xlsx\". format string. save object file. Options include \"table\" (formatted results like see print object console), \"raw\" (long-form results like see call object$results),  \"object\" (actual aba object can later loaded memory used ), \"raw_wide\". split logical. Whether save results split files (csv) split sheets (excel) based group - outcome - stat combinations. argument ignored format == \"object\".","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_write.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write an aba object to file. — aba_write","text":"N/","code":""},{"path":"https://ncullen93.github.io/abaR/reference/aba_write.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write an aba object to file. — aba_write","text":"","code":"# create temp files to save to tmp_filename_csv <- tempfile(fileext = '.csv') tmp_filename_rda <- tempfile(fileext = '.Rda')  # grab built-in data data <- adnimerge %>% dplyr::filter(VISCODE == 'bl')  # fit model model <- data %>% aba_model() %>%   set_groups(everyone()) %>%   set_outcomes(ConvertedToAlzheimers, CSF_ABETA_STATUS_bl) %>%   set_predictors(     PLASMA_ABETA_bl, PLASMA_PTAU181_bl, PLASMA_NFL_bl,     c(PLASMA_ABETA_bl, PLASMA_PTAU181_bl, PLASMA_NFL_bl)   ) %>%   set_stats('glm') %>%   fit() #> [1] \"ConvertedToAlzheimers ~ PLASMA_ABETA_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_PTAU181_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_ABETA_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_PTAU181_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\"  # summarise model model_summary <- model %>% summary()  # save model summary to file as table model_summary %>% aba_write(tmp_filename_csv)  # save model summary to file as raw long-form results model_summary %>% aba_write(tmp_filename_csv, format = 'raw')  # save model summary as an object which can be loaded back into memory model_summary %>% aba_write(tmp_filename_rda, format = 'object')  # load summary back to file to show it works model_summary2 <- aba_read(tmp_filename_rda)  # delete temp files removed <- file.remove(tmp_filename_csv) removed <- file.remove(tmp_filename_rda)"},{"path":"https://ncullen93.github.io/abaR/reference/adnimerge.html","id":null,"dir":"Reference","previous_headings":"","what":"A sample of ADNI data in long format — adnimerge","title":"A sample of ADNI data in long format — adnimerge","text":"sample ADNI data long format. data contains longitudinal follow-visits CU MCI patients, baseline measures plasma biomarkers (abeta, p-tau, nfl), CSF biomarkers, MRI measures, cognition, demographics. Longitudinal outcomes include cognition (MMSE, CDRSB) conversion AD dementia conversion -cause dementia. also binarized biomarker status many variables.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/adnimerge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A sample of ADNI data in long format — adnimerge","text":"","code":"adnimerge"},{"path":"https://ncullen93.github.io/abaR/reference/adnimerge.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A sample of ADNI data in long format — adnimerge","text":"data frame 15,598 rows 28 variables.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/adnimerge.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A sample of ADNI data in long format — adnimerge","text":"https://adni.loni.usc.edu","code":""},{"path":"https://ncullen93.github.io/abaR/reference/all_combos.html","id":null,"dir":"Reference","previous_headings":"","what":"Create all possible combinations of a set of variables — all_combos","title":"Create all possible combinations of a set of variables — all_combos","text":"function creates possible combinations set variables. variables given strings sep. function can used inside call set_predictors creating aba model.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/all_combos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create all possible combinations of a set of variables — all_combos","text":"","code":"all_combos(...)"},{"path":"https://ncullen93.github.io/abaR/reference/all_combos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create all possible combinations of a set of variables — all_combos","text":"... strings. Variable names possible combinations created. variable string separated comma.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/all_combos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create all possible combinations of a set of variables — all_combos","text":"list vectors possible combinations variables","code":""},{"path":"https://ncullen93.github.io/abaR/reference/all_combos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create all possible combinations of a set of variables — all_combos","text":"","code":"data <- adnimerge %>% dplyr::filter(VISCODE == 'bl')  # fit model with all combinations of three variables model <- data %>% aba_model() %>%   set_groups(     everyone(),     DX_bl %in% c('MCI', 'AD')   ) %>%   set_outcomes(ConvertedToAlzheimers, CSF_ABETA_STATUS_bl) %>%   set_predictors(     all_combos('PLASMA_ABETA_bl', 'PLASMA_PTAU181_bl', 'PLASMA_NFL_bl')   ) %>%   set_stats(     stat_glm(std.beta = TRUE)   ) %>%   fit() #> [1] \"ConvertedToAlzheimers ~ PLASMA_ABETA_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_PTAU181_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_ABETA_bl + PLASMA_PTAU181_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_ABETA_bl + PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_ABETA_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_PTAU181_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_ABETA_bl + PLASMA_PTAU181_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_ABETA_bl + PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_ABETA_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_PTAU181_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_ABETA_bl + PLASMA_PTAU181_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_ABETA_bl + PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_ABETA_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_PTAU181_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_ABETA_bl + PLASMA_PTAU181_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_ABETA_bl + PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\"  model_summary <- model %>% aba_summary()"},{"path":"https://ncullen93.github.io/abaR/reference/all_levels.html","id":null,"dir":"Reference","previous_headings":"","what":"Create groups from all levels of one or more variables — all_levels","title":"Create groups from all levels of one or more variables — all_levels","text":"function used within call set_groups(). allows create groups every unique level variable every combination unique levels multiple variables. Also, data aba model must already set.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/all_levels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create groups from all levels of one or more variables — all_levels","text":"","code":"all_levels(...)"},{"path":"https://ncullen93.github.io/abaR/reference/all_levels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create groups from all levels of one or more variables — all_levels","text":"... variables. Variables data","code":""},{"path":"https://ncullen93.github.io/abaR/reference/all_levels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create groups from all levels of one or more variables — all_levels","text":"N/. implications aba model groups.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/all_levels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create groups from all levels of one or more variables — all_levels","text":"","code":"data <- adnimerge %>% dplyr::filter(VISCODE == 'bl') # set groups as all of one variable's levels model <- data %>% aba_model() %>%   set_groups(     all_levels(DX_bl)   )  # set groups as all combinations of two variables' levels model <- data %>% aba_model() %>%   set_groups(     all_levels(DX_bl, CSF_ABETA_STATUS_bl)   )  # use all_levels() in combination with additional, independent group statements model <- data %>% aba_model() %>%   set_groups(     DX_bl == 'CU',     all_levels(DX_bl, CSF_ABETA_STATUS_bl)   )"},{"path":"https://ncullen93.github.io/abaR/reference/as_reactable.abaSummary.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an aba summary to a interactive react table — as_reactable.abaSummary","title":"Convert an aba summary to a interactive react table — as_reactable.abaSummary","text":"function allows format aba summary way printed console using print function. converted interactive react table can explored Rstudio viewer Shiny app.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/as_reactable.abaSummary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an aba summary to a interactive react table — as_reactable.abaSummary","text":"","code":"# S3 method for abaSummary as_reactable(object)"},{"path":"https://ncullen93.github.io/abaR/reference/as_reactable.abaSummary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an aba summary to a interactive react table — as_reactable.abaSummary","text":"object abaSummary. aba summary format reacttable.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/as_reactable.abaSummary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an aba summary to a interactive react table — as_reactable.abaSummary","text":"reactable object reactable package","code":""},{"path":"https://ncullen93.github.io/abaR/reference/as_reactable.abaSummary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert an aba summary to a interactive react table — as_reactable.abaSummary","text":"","code":"# use built-in data data <- adnimerge %>% dplyr::filter(VISCODE == 'bl')  # fit an aba model model <- data %>% aba_model() %>%   set_groups(everyone()) %>%   set_outcomes(PET_ABETA_STATUS_bl) %>%   set_predictors(     PLASMA_PTAU181_bl,     PLASMA_NFL_bl,     c(PLASMA_PTAU181_bl, PLASMA_NFL_bl)   ) %>%   set_covariates(AGE, GENDER, EDUCATION) %>%   set_stats('glm') %>%   fit() #> [1] \"PET_ABETA_STATUS_bl ~ AGE + GENDER + EDUCATION\" #> [1] \"PET_ABETA_STATUS_bl ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl\" #> [1] \"PET_ABETA_STATUS_bl ~ AGE + GENDER + EDUCATION + PLASMA_NFL_bl\" #> [1] \"PET_ABETA_STATUS_bl ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl + PLASMA_NFL_bl\"  # default aba summary model_summary <- model %>% aba_summary()  # convert summary to table my_table <- model_summary %>% as_reactable()"},{"path":"https://ncullen93.github.io/abaR/reference/as_reactable.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an aba summary to a interactive react table — as_reactable","title":"Convert an aba summary to a interactive react table — as_reactable","text":"function allows format aba summary way printed console using print function. converted interactive react table can explored Rstudio viewer Shiny app.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/as_reactable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an aba summary to a interactive react table — as_reactable","text":"","code":"as_reactable(object)"},{"path":"https://ncullen93.github.io/abaR/reference/as_reactable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an aba summary to a interactive react table — as_reactable","text":"object abaSummary. aba summary format reacttable.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/as_reactable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an aba summary to a interactive react table — as_reactable","text":"reactable object reactable package","code":""},{"path":"https://ncullen93.github.io/abaR/reference/as_reactable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert an aba summary to a interactive react table — as_reactable","text":"","code":"# use built-in data data <- adnimerge %>% dplyr::filter(VISCODE == 'bl')  # fit an aba model model <- data %>% aba_model() %>%   set_groups(everyone()) %>%   set_outcomes(PET_ABETA_STATUS_bl) %>%   set_predictors(     PLASMA_PTAU181_bl,     PLASMA_NFL_bl,     c(PLASMA_PTAU181_bl, PLASMA_NFL_bl)   ) %>%   set_covariates(AGE, GENDER, EDUCATION) %>%   set_stats('glm') %>%   fit() #> [1] \"PET_ABETA_STATUS_bl ~ AGE + GENDER + EDUCATION\" #> [1] \"PET_ABETA_STATUS_bl ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl\" #> [1] \"PET_ABETA_STATUS_bl ~ AGE + GENDER + EDUCATION + PLASMA_NFL_bl\" #> [1] \"PET_ABETA_STATUS_bl ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl + PLASMA_NFL_bl\"  # default aba summary model_summary <- model %>% aba_summary()  # convert summary to table my_table <- model_summary %>% as_reactable()"},{"path":"https://ncullen93.github.io/abaR/reference/as_table.abaSummary.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an aba summary to a nicely formatted table — as_table.abaSummary","title":"Convert an aba summary to a nicely formatted table — as_table.abaSummary","text":"function allows format aba summary way printed console using print function. However, one dataframe result (.e., tables split group - outcome - stat combinations).","code":""},{"path":"https://ncullen93.github.io/abaR/reference/as_table.abaSummary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an aba summary to a nicely formatted table — as_table.abaSummary","text":"","code":"# S3 method for abaSummary as_table(object)"},{"path":"https://ncullen93.github.io/abaR/reference/as_table.abaSummary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an aba summary to a nicely formatted table — as_table.abaSummary","text":"object abaSummary. aba summary format table.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/as_table.abaSummary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an aba summary to a nicely formatted table — as_table.abaSummary","text":"tibble","code":""},{"path":"https://ncullen93.github.io/abaR/reference/as_table.abaSummary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert an aba summary to a nicely formatted table — as_table.abaSummary","text":"","code":"# use built-in data data <- adnimerge %>% dplyr::filter(VISCODE == 'bl')  # fit an aba model model <- data %>% aba_model() %>%   set_groups(everyone()) %>%   set_outcomes(PET_ABETA_STATUS_bl) %>%   set_predictors(     PLASMA_PTAU181_bl,     PLASMA_NFL_bl,     c(PLASMA_PTAU181_bl, PLASMA_NFL_bl)   ) %>%   set_covariates(AGE, GENDER, EDUCATION) %>%   set_stats('glm') %>%   fit() #> [1] \"PET_ABETA_STATUS_bl ~ AGE + GENDER + EDUCATION\" #> [1] \"PET_ABETA_STATUS_bl ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl\" #> [1] \"PET_ABETA_STATUS_bl ~ AGE + GENDER + EDUCATION + PLASMA_NFL_bl\" #> [1] \"PET_ABETA_STATUS_bl ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl + PLASMA_NFL_bl\"  # default aba summary model_summary <- model %>% aba_summary()  # convert summary to table my_table <- model_summary %>% as_table()"},{"path":"https://ncullen93.github.io/abaR/reference/as_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an aba summary to a nicely formatted table — as_table","title":"Convert an aba summary to a nicely formatted table — as_table","text":"function allows format aba summary way printed console using print function. However, one dataframe result (.e., tables split group - outcome - stat combinations).","code":""},{"path":"https://ncullen93.github.io/abaR/reference/as_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an aba summary to a nicely formatted table — as_table","text":"","code":"as_table(object)"},{"path":"https://ncullen93.github.io/abaR/reference/as_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an aba summary to a nicely formatted table — as_table","text":"object abaSummary. aba summary format table.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/as_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an aba summary to a nicely formatted table — as_table","text":"tibble","code":""},{"path":"https://ncullen93.github.io/abaR/reference/as_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert an aba summary to a nicely formatted table — as_table","text":"","code":"# use built-in data data <- adnimerge %>% dplyr::filter(VISCODE == 'bl')  # fit an aba model model <- data %>% aba_model() %>%   set_groups(everyone()) %>%   set_outcomes(PET_ABETA_STATUS_bl) %>%   set_predictors(     PLASMA_PTAU181_bl,     PLASMA_NFL_bl,     c(PLASMA_PTAU181_bl, PLASMA_NFL_bl)   ) %>%   set_covariates(AGE, GENDER, EDUCATION) %>%   set_stats('glm') %>%   fit() #> [1] \"PET_ABETA_STATUS_bl ~ AGE + GENDER + EDUCATION\" #> [1] \"PET_ABETA_STATUS_bl ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl\" #> [1] \"PET_ABETA_STATUS_bl ~ AGE + GENDER + EDUCATION + PLASMA_NFL_bl\" #> [1] \"PET_ABETA_STATUS_bl ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl + PLASMA_NFL_bl\"  # default aba summary model_summary <- model %>% aba_summary()  # convert summary to table my_table <- model_summary %>% as_table()"},{"path":"https://ncullen93.github.io/abaR/reference/eval_boot.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a bootstrap evaluator — eval_boot","title":"Create a bootstrap evaluator — eval_boot","text":"Create bootstrap evaluator","code":""},{"path":"https://ncullen93.github.io/abaR/reference/eval_boot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a bootstrap evaluator — eval_boot","text":"","code":"eval_boot(ntrials = 10, conf_type = c(\"norm\", \"perc\"), contrasts = TRUE)"},{"path":"https://ncullen93.github.io/abaR/reference/eval_boot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a bootstrap evaluator — eval_boot","text":"ntrials integer. number trials perform conf_type string. calculate confidence interval performance metrics across trials: 'norm' calcualtes std err using 'sd' function, 'perc' calculats lower upper conf values using 'quantile' function. contrasts logical. Whether compare performance fits within group-outcome-stat combination (.e., predictors). result p-value model comparison proporiton trials one model lower performance another model. Thus, p-value 0.05 indicates one model performed worse model 5% trials. useful compare models overlapping parameters therefore compared using typical anova call.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/eval_boot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a bootstrap evaluator — eval_boot","text":"aba model","code":""},{"path":"https://ncullen93.github.io/abaR/reference/eval_boot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a bootstrap evaluator — eval_boot","text":"","code":"data <- adnimerge %>% dplyr::filter(VISCODE == 'bl') model <- aba_model() %>%   set_data(data) %>%   set_groups(everyone()) %>%   set_outcomes(ConvertedToAlzheimers, CSF_ABETA_STATUS_bl) %>%   set_predictors(     PLASMA_ABETA_bl, PLASMA_PTAU181_bl, PLASMA_NFL_bl,     c(PLASMA_ABETA_bl, PLASMA_PTAU181_bl, PLASMA_NFL_bl)   ) %>%   set_stats('glm') %>%   set_evals(eval_boot(ntrials = 5)) %>%   fit() #> [1] \"ConvertedToAlzheimers ~ PLASMA_ABETA_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_PTAU181_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_ABETA_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_PTAU181_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_ABETA_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_PTAU181_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_ABETA_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_PTAU181_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_ABETA_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_PTAU181_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_ABETA_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_PTAU181_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_ABETA_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_PTAU181_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_ABETA_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_PTAU181_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_ABETA_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_PTAU181_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_ABETA_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_PTAU181_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_ABETA_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_PTAU181_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_ABETA_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_PTAU181_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\""},{"path":"https://ncullen93.github.io/abaR/reference/eval_cv.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a cross validation evaluator — eval_cv","title":"Create a cross validation evaluator — eval_cv","text":"Create cross validation evaluator","code":""},{"path":"https://ncullen93.github.io/abaR/reference/eval_cv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a cross validation evaluator — eval_cv","text":"","code":"eval_cv(   nfolds = 5,   ntrials = 1,   conf_type = c(\"norm\", \"perc\"),   contrasts = FALSE )"},{"path":"https://ncullen93.github.io/abaR/reference/eval_cv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a cross validation evaluator — eval_cv","text":"nfolds integer. number cv folds ntrials integer. number cv trials run conf_type string. calculate confidence interval performance metrics across trials: 'norm' calcualtes std err using 'sd' function, 'perc' calculats lower upper conf values using 'quantile' function. contrasts logical. Whether compare test performance fits within group-outcome-stat combination (.e., predictors). result p-value model comparison proporiton trials one model lower performance another model. Thus, p-value 0.05 indicates one model performed worse model 5% trials. ntrials == 1, value can 0 1 indicate model better.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/eval_cv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a cross validation evaluator — eval_cv","text":"aba model","code":""},{"path":"https://ncullen93.github.io/abaR/reference/eval_cv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a cross validation evaluator — eval_cv","text":"","code":"data <- adnimerge %>% dplyr::filter(VISCODE == 'bl') model <- aba_model() %>%   set_data(data) %>%   set_groups(everyone()) %>%   set_outcomes(ConvertedToAlzheimers, CSF_ABETA_STATUS_bl) %>%   set_predictors(     PLASMA_ABETA_bl, PLASMA_PTAU181_bl, PLASMA_NFL_bl,     c(PLASMA_ABETA_bl, PLASMA_PTAU181_bl, PLASMA_NFL_bl)   ) %>%   set_stats('glm') %>%   set_evals('cv') %>%   fit() #> [1] \"ConvertedToAlzheimers ~ PLASMA_ABETA_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_PTAU181_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_ABETA_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_PTAU181_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_ABETA_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_PTAU181_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_ABETA_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_PTAU181_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_ABETA_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_PTAU181_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_ABETA_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_PTAU181_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_ABETA_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_PTAU181_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_ABETA_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_PTAU181_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_ABETA_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_PTAU181_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_ABETA_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_PTAU181_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\""},{"path":"https://ncullen93.github.io/abaR/reference/eval_standard.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a standard evaluator — eval_standard","title":"Create a standard evaluator — eval_standard","text":"Create standard evaluator","code":""},{"path":"https://ncullen93.github.io/abaR/reference/eval_standard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a standard evaluator — eval_standard","text":"","code":"eval_standard()"},{"path":"https://ncullen93.github.io/abaR/reference/eval_standard.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a standard evaluator — eval_standard","text":"aba model","code":""},{"path":"https://ncullen93.github.io/abaR/reference/eval_standard.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a standard evaluator — eval_standard","text":"","code":"data <- adnimerge %>% dplyr::filter(VISCODE == 'bl') model <- aba_model() %>%   set_data(data) %>%   set_groups(everyone()) %>%   set_outcomes(ConvertedToAlzheimers, CSF_ABETA_STATUS_bl) %>%   set_predictors(     PLASMA_ABETA_bl, PLASMA_PTAU181_bl, PLASMA_NFL_bl,     c(PLASMA_ABETA_bl, PLASMA_PTAU181_bl, PLASMA_NFL_bl)   ) %>%   set_stats('glm') %>%   set_evals('standard') %>%   fit() #> [1] \"ConvertedToAlzheimers ~ PLASMA_ABETA_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_PTAU181_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_ABETA_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_PTAU181_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\""},{"path":"https://ncullen93.github.io/abaR/reference/eval_traintest.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a train-test evaluator — eval_traintest","title":"Create a train-test evaluator — eval_traintest","text":"Create train-test evaluator","code":""},{"path":"https://ncullen93.github.io/abaR/reference/eval_traintest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a train-test evaluator — eval_traintest","text":"","code":"eval_traintest(   split = 0.8,   ntrials = 1,   conf_type = c(\"norm\", \"perc\"),   contrasts = TRUE )"},{"path":"https://ncullen93.github.io/abaR/reference/eval_traintest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a train-test evaluator — eval_traintest","text":"split double 0 1. percent data use train set ntrials integer. number train-test trials run conf_type string. calculate confidence interval performance metrics across trials: 'norm' calcualtes std err using 'sd' function, 'perc' calculats lower upper conf values using 'quantile' function. contrasts logical. Whether compare test performance fits within group-outcome-stat combination (.e., predictors). result p-value model comparison proporiton trials one model lower performance another model. Thus, p-value 0.05 indicates one model performed worse model 5% trials. ntrials == 1, value can 0 1 indicate model better.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/eval_traintest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a train-test evaluator — eval_traintest","text":"aba model modified evals parameter","code":""},{"path":"https://ncullen93.github.io/abaR/reference/eval_traintest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a train-test evaluator — eval_traintest","text":"","code":"data <- adnimerge %>% dplyr::filter(VISCODE == 'bl') model <- aba_model() %>%   set_data(data) %>%   set_groups(everyone()) %>%   set_outcomes(ConvertedToAlzheimers, CSF_ABETA_STATUS_bl) %>%   set_predictors(     PLASMA_ABETA_bl, PLASMA_PTAU181_bl, PLASMA_NFL_bl,     c(PLASMA_ABETA_bl, PLASMA_PTAU181_bl, PLASMA_NFL_bl)   ) %>%   set_stats('glm') %>%   set_evals('traintest') %>%   fit() #> [1] \"ConvertedToAlzheimers ~ PLASMA_ABETA_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_PTAU181_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_ABETA_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_PTAU181_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\""},{"path":"https://ncullen93.github.io/abaR/reference/everyone.html","id":null,"dir":"Reference","previous_headings":"","what":"Use all data rows as a group in an aba model. — everyone","title":"Use all data rows as a group in an aba model. — everyone","text":"helper function allows specify group aba model filtering conditions. useful want specify aba model one sub-group data also want fit models entire data. function really necessary used instead call set_groups building aba model.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/everyone.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use all data rows as a group in an aba model. — everyone","text":"","code":"everyone()"},{"path":"https://ncullen93.github.io/abaR/reference/everyone.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use all data rows as a group in an aba model. — everyone","text":"function actually just returns value TRUE.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/everyone.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use all data rows as a group in an aba model. — everyone","text":"","code":"data <- adnimerge %>% dplyr::filter(VISCODE == 'bl')  # fit model with one subgroup (DX_bl) and also the entire data model <- data %>% aba_model() %>%   set_groups(     everyone(),     DX_bl %in% c('MCI', 'AD')   ) %>%   set_outcomes(ConvertedToAlzheimers, CSF_ABETA_STATUS_bl) %>%   set_predictors(PLASMA_ABETA_bl, PLASMA_PTAU181_bl, PLASMA_NFL_bl) %>%   set_stats(     stat_glm(std.beta = TRUE)   ) %>%   fit() #> [1] \"ConvertedToAlzheimers ~ PLASMA_ABETA_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_PTAU181_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_ABETA_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_PTAU181_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_ABETA_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_PTAU181_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_ABETA_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_PTAU181_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_NFL_bl\"  model_summary <- model %>% aba_summary()"},{"path":"https://ncullen93.github.io/abaR/reference/fit.abaModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit an aba model. — fit.abaModel","title":"Fit an aba model. — fit.abaModel","text":"Calling fit trigger fitting statistical models specified model. result fits group - outcome - stat combination.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/fit.abaModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit an aba model. — fit.abaModel","text":"","code":"# S3 method for abaModel fit(object, ...)"},{"path":"https://ncullen93.github.io/abaR/reference/fit.abaModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit an aba model. — fit.abaModel","text":"object aba model aba model fitted. ... additional parameters.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/fit.abaModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit an aba model. — fit.abaModel","text":"abaModel","code":""},{"path":"https://ncullen93.github.io/abaR/reference/fit.abaModel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit an aba model. — fit.abaModel","text":"Note function identical generic aba_fit() function.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/fit.abaModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit an aba model. — fit.abaModel","text":"","code":"data <- adnimerge %>% dplyr::filter(VISCODE == 'bl')  model_spec <- data %>% aba_model() %>%   set_groups(everyone()) %>%   set_outcomes(ConvertedToAlzheimers, CSF_ABETA_STATUS_bl) %>%   set_predictors(     PLASMA_ABETA_bl, PLASMA_PTAU181_bl, PLASMA_NFL_bl,     c(PLASMA_ABETA_bl, PLASMA_PTAU181_bl, PLASMA_NFL_bl)   ) %>%   set_stats('glm')  model <- model_spec %>% aba_fit() #> [1] \"ConvertedToAlzheimers ~ PLASMA_ABETA_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_PTAU181_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_ABETA_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_PTAU181_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\""},{"path":"https://ncullen93.github.io/abaR/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://ncullen93.github.io/abaR/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://ncullen93.github.io/abaR/reference/predict.abaModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Get individual predictions from a fitted aba model — predict.abaModel","title":"Get individual predictions from a fitted aba model — predict.abaModel","text":"function allows get fitted/predicted values data used fit aba model new data. essentially extension broom::augment() function.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/predict.abaModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get individual predictions from a fitted aba model — predict.abaModel","text":"","code":"# S3 method for abaModel predict(object, ...)"},{"path":"https://ncullen93.github.io/abaR/reference/predict.abaModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get individual predictions from a fitted aba model — predict.abaModel","text":"object fitted aba model. model get predictions . ... additional parameters. Accepted: newdata, merge, augment. See aba_fit() information.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/predict.abaModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get individual predictions from a fitted aba model — predict.abaModel","text":"dataframe original data fitted/predicted values added group-outcome-stat-predictor combination.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/predict.abaModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get individual predictions from a fitted aba model — predict.abaModel","text":"","code":"data <- adnimerge %>% dplyr::filter(VISCODE == 'bl')  model <- data %>% aba_model() %>%   set_groups(     everyone(),     DX_bl %in% c('MCI', 'AD')   ) %>%   set_outcomes(CDRSB_bl, MMSE_bl) %>%   set_predictors(     PLASMA_PTAU181_bl, PLASMA_NFL_bl,     c(PLASMA_PTAU181_bl, PLASMA_NFL_bl)   ) %>%   set_covariates(AGE, GENDER, EDUCATION) %>%   set_stats('lm')  model <- model %>% fit() #> [1] \"CDRSB_bl ~ AGE + GENDER + EDUCATION\" #> [1] \"CDRSB_bl ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl\" #> [1] \"CDRSB_bl ~ AGE + GENDER + EDUCATION + PLASMA_NFL_bl\" #> [1] \"CDRSB_bl ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"MMSE_bl ~ AGE + GENDER + EDUCATION\" #> [1] \"MMSE_bl ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl\" #> [1] \"MMSE_bl ~ AGE + GENDER + EDUCATION + PLASMA_NFL_bl\" #> [1] \"MMSE_bl ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"CDRSB_bl ~ AGE + GENDER + EDUCATION\" #> [1] \"CDRSB_bl ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl\" #> [1] \"CDRSB_bl ~ AGE + GENDER + EDUCATION + PLASMA_NFL_bl\" #> [1] \"CDRSB_bl ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"MMSE_bl ~ AGE + GENDER + EDUCATION\" #> [1] \"MMSE_bl ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl\" #> [1] \"MMSE_bl ~ AGE + GENDER + EDUCATION + PLASMA_NFL_bl\" #> [1] \"MMSE_bl ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl + PLASMA_NFL_bl\"  # add model predictions to original data data_augmented <- model %>% aba_predict()  # store predictions separately by group - outcome - stat combination data_augmented2 <- model %>% aba_predict(merge = FALSE)"},{"path":"https://ncullen93.github.io/abaR/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. generics fit","code":""},{"path":"https://ncullen93.github.io/abaR/reference/set_covariates.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the covariates of an aba model. — set_covariates","title":"Set the covariates of an aba model. — set_covariates","text":"Covariates independent variables want always included statistical models - regardless groups, outcomes, predictors. one set covariates can supplied. want test multiple sets covariates, specify predictors create new, separate model. function supports string inputs actual variables. inputs separated comma, variables together single covariate set.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/set_covariates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the covariates of an aba model. — set_covariates","text":"","code":"set_covariates(.model, ..., .include_basic = TRUE)"},{"path":"https://ncullen93.github.io/abaR/reference/set_covariates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the covariates of an aba model. — set_covariates","text":".model aba model. model want set covariates. ... strings variables. comma-separated collection values become single set covariates. supply actual variables, data aba model already set. .include_basic logical. Whether fit model covariates (\"basic\" model).","code":""},{"path":"https://ncullen93.github.io/abaR/reference/set_covariates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the covariates of an aba model. — set_covariates","text":"aba model covariates set.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/set_covariates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the covariates of an aba model. — set_covariates","text":"","code":"data <- adnimerge %>% dplyr::filter(VISCODE == 'bl')  # set with variables model <- aba_model() %>%   set_data(data) %>%   set_covariates(AGE, GENDER, EDUCATION)  # supply strings - data does not need to be set first here. But it will # result in an error if these variables do not éxist in the eventual data. model <- aba_model() %>%   set_covariates('AGE', 'GENDER', 'EDUCATION')"},{"path":"https://ncullen93.github.io/abaR/reference/set_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the data of an aba model — set_data","title":"Set the data of an aba model — set_data","text":"raw data used fit statistical models. data processed according specified aba stat objects.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/set_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the data of an aba model — set_data","text":"","code":"set_data(model, data)"},{"path":"https://ncullen93.github.io/abaR/reference/set_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the data of an aba model — set_data","text":"model aba model. model data set. data dataframe tibble. data set.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/set_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the data of an aba model — set_data","text":"aba model data set.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/set_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the data of an aba model — set_data","text":"","code":"data <- adnimerge %>% dplyr::filter(VISCODE == 'bl')  # set data in the traditional way model <- aba_model() %>% set_data(data)  # pipe data into an `aba_model()` call to get access to auto-completion on # variables from RStudio upon further pipes. This is useful for setting # other specs because it will reduce the chance of typos on variable names. model <- data %>% aba_model()"},{"path":"https://ncullen93.github.io/abaR/reference/set_evals.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the evals of an aba model — set_evals","title":"Set the evals of an aba model — set_evals","text":"Evals ways fit stats data. standard method simply fit model entire dataset one time. However, additional methods bootstrap sampling, train-test splits, cross validation. aba model can multiple evals, can useful want test difference cross validation five splits three, example.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/set_evals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the evals of an aba model — set_evals","text":"","code":"set_evals(.model, ..., .labels = NULL)"},{"path":"https://ncullen93.github.io/abaR/reference/set_evals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the evals of an aba model — set_evals","text":".model aba model. model set evals . ... comma-separated strings abaEval objects. evals wish set given model .labels vector strings (optional). .labels eval.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/set_evals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the evals of an aba model — set_evals","text":"aba model evals set.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/set_evals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the evals of an aba model — set_evals","text":"","code":"model <- aba_model() %>%   set_evals(     'standard'     #'boot',     #'traintest',     #'cv'   ) model <- aba_model() %>%   set_evals(     eval_standard()     #eval_boot(ntrials = 100),     #eval_traintest(split = 0.5, ntrials = 10),     #eval_cv(nfolds = 3, ntrials = 10)   ) model <- aba_model() %>%   set_evals(     eval_cv(nfolds = 3)   )"},{"path":"https://ncullen93.github.io/abaR/reference/set_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the groups of an aba model. — set_groups","title":"Set the groups of an aba model. — set_groups","text":"Groups filtered subsets data want fit statistical models . function supports string inputs logical functions variables (provided data already set aba model). inputs separated comma, input different group. can also specify .labels group.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/set_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the groups of an aba model. — set_groups","text":"","code":"set_groups(.model, ..., .labels = NULL)"},{"path":"https://ncullen93.github.io/abaR/reference/set_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the groups of an aba model. — set_groups","text":".model aba model. model want set groups. ... comma-separated strings logical expressions. specifies subsets data aba model filter. .labels vector strings. Optional .labels printing & plotting.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/set_groups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the groups of an aba model. — set_groups","text":"aba model groups set given input.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/set_groups.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set the groups of an aba model. — set_groups","text":"Note everyone() \"everyone()\" can used specify group filtering. can useful want fit models entire group sub-group.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/set_groups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the groups of an aba model. — set_groups","text":"","code":"data <- adnimerge %>% dplyr::filter(VISCODE == 'bl')  # set groups based on logical expressions. Here, data must be supplied first. model <- data %>% aba_model() %>%   set_groups(     everyone(),     DX_bl == 'CU',     (DX_bl %in% c('MCI','AD')) & (CSF_ABETA_bl < 880)   ) print(model) #> ---------------------- #> ABA MODEL (not fitted) #> ---------------------- #> Groups: #>    Everyone #>    DX_bl == \"CU\" #>    (DX_bl %in% c(\"MCI\", \"AD\")) & (CSF_ABETA_bl < 880)  # specify .labels which will be used later for printing & plotting model <- data %>% aba_model() %>%   set_groups(     everyone(),     DX_bl == 'CU',     (DX_bl %in% c('MCI','AD')) & (CSF_ABETA_bl < 880),     .labels = c('All participants', 'CU-only', 'Ab+ MCI & AD')   ) print(model) #> ---------------------- #> ABA MODEL (not fitted) #> ---------------------- #> Groups: #>    All participants #>    CU-only #>    Ab+ MCI & AD  # set groups based on strings. No data is required to be supplied first. model <- aba_model() %>%   set_groups(     \"everyone()\",     \"DX_bl == 'CU'\",     \"(DX_bl %in% c('MCI','AD')) & (CSF_ABETA_bl < 880)\"   ) print(model) #> ---------------------- #> ABA MODEL (not fitted) #> ---------------------- #> Groups: #>    Everyone #>    DX_bl == \"CU\" #>    (DX_bl %in% c(\"MCI\", \"AD\")) & (CSF_ABETA_bl < 880)"},{"path":"https://ncullen93.github.io/abaR/reference/set_outcomes.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the outcomes of an aba model. — set_outcomes","title":"Set the outcomes of an aba model. — set_outcomes","text":"Outcomes dependent variables statistical models. function supports string inputs actual variables found tidy-selection. inputs separated comma, input different outcome can also specify .labels outcome.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/set_outcomes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the outcomes of an aba model. — set_outcomes","text":"","code":"set_outcomes(.model, ..., .labels = NULL)"},{"path":"https://ncullen93.github.io/abaR/reference/set_outcomes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the outcomes of an aba model. — set_outcomes","text":".model aba model. model want set outcomes ... strings variables. comma-seperated value new outcome. give variables, data aba model already set. .labels vector strings. Optional .labels printing & plotting.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/set_outcomes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the outcomes of an aba model. — set_outcomes","text":"aba model outcomes set.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/set_outcomes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the outcomes of an aba model. — set_outcomes","text":"","code":"data <- adnimerge %>% dplyr::filter(VISCODE == 'bl')  # set with variables model <- aba_model() %>%   set_data(data) %>%   set_outcomes(CDRSB, ADAS13, MMSE)  # supply .labels model <- aba_model() %>%   set_data(data) %>%   set_outcomes(CDRSB, ADAS13, MMSE, .labels = c('CDR-SB','ADAS-13','MMSE'))  # supply strings - data does not need to be set first here. But it will # result in an error if these variables do not éxist in the eventual data. model <- aba_model() %>%   set_outcomes('CDRSB', 'ADAS13', 'MMSE')"},{"path":"https://ncullen93.github.io/abaR/reference/set_predictors.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the predictors of an aba model. — set_predictors","title":"Set the predictors of an aba model. — set_predictors","text":"Predictors independent variables want vary factor statistical models across different groups, outcomes, stats. Predictors can supplied individual variables collections variables, refer unit predictors \"predictor\". function supports string inputs actual variables. function also supports tidy-selection functions like contains starts_with allows convenient selection many variables common names.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/set_predictors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the predictors of an aba model. — set_predictors","text":"","code":"set_predictors(.model, ..., .labels = NULL, .split = FALSE)"},{"path":"https://ncullen93.github.io/abaR/reference/set_predictors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the predictors of an aba model. — set_predictors","text":".model aba model. model want set predictors ... strings variables tidy-selection functions. comma-separated value new predictor set. supply actual variables, data aba model already set. .labels vector strings. Optional .labels printing & plotting. .labels set \"self\" labels predictor values also. .split boolean. Whether split variables separate predictors keep together one combined predictor. relevant setting predictors one vector using things like \"starts_with(...)\"","code":""},{"path":"https://ncullen93.github.io/abaR/reference/set_predictors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the predictors of an aba model. — set_predictors","text":"aba model predictors set.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/set_predictors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the predictors of an aba model. — set_predictors","text":"","code":"data <- adnimerge %>% dplyr::filter(VISCODE == 'bl')  # set with variables - this will result in four \"predictor sets\". model <- aba_model() %>%   set_data(data) %>%   set_predictors(     PLASMA_ABETA_bl,     PLASMA_PTAU181_bl,     PLASMA_NFL_bl,     c(PLASMA_ABETA_bl, PLASMA_PTAU181_bl, PLASMA_NFL_bl)   )  # set with tidy selection functions - but this is only one \"predictor set\", # not multiple individual predictor sets. model <- aba_model() %>%   set_data(data) %>%   set_predictors(     starts_with('PLASMA')   )  # automatically generate all possible combinations of variables model <- aba_model() %>%   set_data(data) %>%   set_predictors(     all_combos(c('PLASMA_ABETA_bl', 'PLASMA_PTAU181_bl', 'PLASMA_NFL_bl'))   )  # supply strings - data does not need to be set first here. But it will # result in an error if these variables do not éxist in the eventual data. model <- aba_model() %>%   set_data(data) %>%   set_predictors(     'PLASMA_ABETA_bl',     'PLASMA_PTAU181_bl',     'PLASMA_NFL_bl',     c('PLASMA_ABETA_bl', 'PLASMA_PTAU181_bl', 'PLASMA_NFL_bl')   )"},{"path":"https://ncullen93.github.io/abaR/reference/set_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the stats of an aba model — set_stats","title":"Set the stats of an aba model — set_stats","text":"Stats objects specify 1) model formulas created model specification, 2) actual fit statistical models. Stats also parameters can specify change stat fit. Multiple stats can specified aba model. best way see available stats type aba::stat_ console look auto-completion.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/set_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the stats of an aba model — set_stats","text":"","code":"set_stats(.model, ..., .labels = NULL)"},{"path":"https://ncullen93.github.io/abaR/reference/set_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the stats of an aba model — set_stats","text":".model aba model. model set stats. ... strings aba stat object. comma-separated value different stat. specify string, default stat params used. stats require actually call (e.g. stat_lme) require parameters like id time variables. .labels vector strings. .labels printing & plotting.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/set_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the stats of an aba model — set_stats","text":"abaModel object stats sets.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/set_stats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set the stats of an aba model — set_stats","text":"broad collection stats implemented aba plan add . Please feel free request . Also, certain extra parameters common stats. include std.beta determines whether z-score variables prior model fitting, complete.cases determines whether use individuals available data within group - outcome across predictor sets.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/set_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the stats of an aba model — set_stats","text":"","code":"# create default stat object by specifying only a string model <- aba_model() %>%   set_stats('glm')  # pass an actual stat object. This is useful to specify extra params # such as `std.beta` and `complete.cases` which is common to all stats. model <- aba_model() %>%   set_stats(     stat_glm(std.beta = TRUE, complete.cases = FALSE)   )  # some stats such as lme require parameters # those variables are expected to exist in the eventual data model <- aba_model() %>%   set_stats(     stat_lmer(id = 'RID', time = 'YEARS_bl')   )  # you can see these extra stat params when you print the model print(model) #> ---------------------- #> ABA MODEL (not fitted) #> ---------------------- #> Stats: #>    lmer(id = RID | time = YEARS_bl)  #>"},{"path":"https://ncullen93.github.io/abaR/reference/stat_ancova.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an ancova stat object. — stat_ancova","title":"Create an ancova stat object. — stat_ancova","text":"function creates ancova stat object can passed input set_stats() function building aba model. stat performs traditional ancova analysis using lm function change endpoint outcome, adjustment baseline covariates baseline outcome, also treatment variable whose effect endpoint care .","code":""},{"path":"https://ncullen93.github.io/abaR/reference/stat_ancova.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an ancova stat object. — stat_ancova","text":"","code":"stat_ancova(   treatment,   baseline_suffix = \"bl\",   std.beta = FALSE,   complete.cases = TRUE )"},{"path":"https://ncullen93.github.io/abaR/reference/stat_ancova.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an ancova stat object. — stat_ancova","text":"treatment string. treatment variable whose effect outcome care . treatment, can just use stat_lm change variable outcome. baseline_suffix string. suffix add outcome variable order pick associated baseline variable. must adjust baseline outcome ancova, way specify different predictor outcome. outcomes e.g. \"CDRSB\" \"MMSE\", baseline_suffix \"bl\" mean ancova fit \"CDRSB\" outcome \"CDRSB_bl\" added formula every fit \"MMSE\" outcome \"MMSE_bl\" added. means baseline variables must actually exist data! std.beta logical. Whether standardize model predictors covariates prior analysis. complete.cases logical. Whether include subset data missing data outcomes, predictors, covariates. Note complete cases considering within group - outcome combination across predictor sets.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/stat_ancova.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an ancova stat object. — stat_ancova","text":"abaStat object ancova stat type.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/stat_ancova.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an ancova stat object. — stat_ancova","text":"","code":"# filter to 24 month visit; calculate change in cognition to use as outcome; # assume abeta status as \"treatment\" variable. # The goal is to see if \"treatment\" has an effect on 2y cognitive decline data <- adnimerge %>%   dplyr::filter(     VISCODE == 'm24',     DX_bl %in% c('MCI', 'AD'),     !is.na(CSF_ABETA_STATUS_bl)   ) %>%   dplyr::mutate(     CDRSB = CDRSB - CDRSB_bl,     ADAS13 = ADAS13 - ADAS13_bl,     TREATMENT = factor(CSF_ABETA_STATUS_bl, levels=c(1,0),                        labels=c('Placebo','Treatment'))   )  # fit model. note that baseline outcome will be added based on the suffix. # e.g., fits with \"CDRSB\" as outcome will also add \"CDRSB_bl\" to the formula. ancova_model <- data %>% aba_model() %>%   set_outcomes(CDRSB, ADAS13) %>%   set_covariates(AGE, GENDER, EDUCATION) %>%   set_stats(     stat_ancova(treatment = 'TREATMENT', baseline_suffix = 'bl')   ) %>%   fit() #> [1] \"CDRSB ~ AGE + GENDER + EDUCATION\" #> [1] \"ADAS13 ~ AGE + GENDER + EDUCATION\"  # summarise model. treatment effect will be shown in the treatment coefficient ancova_summary <- ancova_model %>% summary()"},{"path":"https://ncullen93.github.io/abaR/reference/stat_cox.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a glm stat object. — stat_cox","title":"Create a glm stat object. — stat_cox","text":"function creates glm stat object can passed input set_stats() function building aba model. stat performs traditional logistic regression analysis using glm function binary outcome. Coefficients presented odds ratios. Default metrics include AUC.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/stat_cox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a glm stat object. — stat_cox","text":"","code":"stat_cox(time, std.beta = FALSE, complete.cases = TRUE)"},{"path":"https://ncullen93.github.io/abaR/reference/stat_cox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a glm stat object. — stat_cox","text":"time string. \"time risk\" variable determining long e.g. individual study individual got disease. std.beta logical. Whether standardize model predictors covariates prior analysis. complete.cases logical. Whether include subset data missing data outcomes, predictors, covariates. Note complete cases considering within group - outcome combination across predictor sets.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/stat_cox.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a glm stat object. — stat_cox","text":"abaStat object glm stat type.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/stat_cox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a glm stat object. — stat_cox","text":"","code":"data <- adnimerge %>% dplyr::filter(VISCODE == 'bl')  # fit model model <- data %>% aba_model() %>%   set_groups(everyone()) %>%   set_outcomes(ConvertedToAlzheimers, ConvertedToDementia) %>%   set_predictors(     PLASMA_PTAU181_bl, PLASMA_NFL_bl,     c(PLASMA_PTAU181_bl, PLASMA_NFL_bl)   ) %>%   set_stats(     stat_cox(time = 'TimeUnderRiskDementia')   ) %>%   fit()  ## summarise model model_summary <- model %>% summary()"},{"path":"https://ncullen93.github.io/abaR/reference/stat_glm.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a glm stat object. — stat_glm","title":"Create a glm stat object. — stat_glm","text":"function creates glm stat object can passed input set_stats() function building aba model. stat performs traditional logistic regression analysis using glm function binary outcome. Coefficients presented odds ratios. Default metrics include AUC.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/stat_glm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a glm stat object. — stat_glm","text":"","code":"stat_glm(std.beta = FALSE, complete.cases = TRUE)"},{"path":"https://ncullen93.github.io/abaR/reference/stat_glm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a glm stat object. — stat_glm","text":"std.beta logical. Whether standardize model predictors covariates prior analysis. complete.cases logical. Whether include subset data missing data outcomes, predictors, covariates. Note complete cases considering within group - outcome combination across predictor sets.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/stat_glm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a glm stat object. — stat_glm","text":"abaStat object glm stat type.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/stat_glm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a glm stat object. — stat_glm","text":"","code":"data <- adnimerge %>% dplyr::filter(VISCODE == 'bl')  # fit glm model with binary outcome variables model <- data %>% aba_model() %>%   set_groups(everyone()) %>%   set_outcomes(ConvertedToAlzheimers, CSF_ABETA_STATUS_bl) %>%   set_predictors(     PLASMA_PTAU181_bl, PLASMA_NFL_bl,     c(PLASMA_PTAU181_bl, PLASMA_NFL_bl)   ) %>%   set_stats(     stat_glm(std.beta = TRUE)   ) %>%   fit() #> [1] \"ConvertedToAlzheimers ~ PLASMA_PTAU181_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_NFL_bl\" #> [1] \"ConvertedToAlzheimers ~ PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_PTAU181_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_NFL_bl\" #> [1] \"CSF_ABETA_STATUS_bl ~ PLASMA_PTAU181_bl + PLASMA_NFL_bl\"  # summarise glm model model_summary <- model %>% summary()  # plot glm results fig1 <- model_summary %>% aba_plot_coef() fig2 <- model_summary %>% aba_plot_metric() fig3 <- model_summary %>% aba_plot_roc()"},{"path":"https://ncullen93.github.io/abaR/reference/stat_lm.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an lm stat object. — stat_lm","title":"Create an lm stat object. — stat_lm","text":"function creates lm stat object can passed input set_stats() function building aba model. stat performs traditional linear regression analysis using lm function. Coefficients presented beta coefficients. Default metrics include adjusted R2.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/stat_lm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an lm stat object. — stat_lm","text":"","code":"stat_lm(std.beta = FALSE, complete.cases = TRUE, poly = NULL)"},{"path":"https://ncullen93.github.io/abaR/reference/stat_lm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an lm stat object. — stat_lm","text":"std.beta logical. Whether standardize model predictors covariates prior analysis. complete.cases logical. Whether include subset data missing data outcomes, predictors, covariates. Note complete cases considering within group - outcome combination across predictor sets. poly numeric list. Whether use polynomial regression. Supplying single number call poly(..., #NUMBER#, raw=TRUE) every covariate predictor. Supplying list allows perform polynomial expansion specific variables. NULL means polynomials.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/stat_lm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an lm stat object. — stat_lm","text":"abaStat object lm stat type.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/stat_lm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an lm stat object. — stat_lm","text":"","code":"data <- adnimerge %>% dplyr::filter(VISCODE == 'bl')  # fit lm model with continuous outcome variables model <- data %>% aba_model() %>%   set_groups(     everyone(),     DX_bl %in% c('MCI', 'AD')   ) %>%   set_outcomes(CDRSB_bl, MMSE_bl) %>%   set_predictors(     PLASMA_ABETA_bl, PLASMA_PTAU181_bl, PLASMA_NFL_bl,     c(PLASMA_ABETA_bl, PLASMA_PTAU181_bl, PLASMA_NFL_bl)   ) %>%   set_covariates(AGE, GENDER, EDUCATION) %>%   set_stats(     stat_lm(std.beta = TRUE)   ) %>%   fit() #> [1] \"CDRSB_bl ~ AGE + GENDER + EDUCATION\" #> [1] \"CDRSB_bl ~ AGE + GENDER + EDUCATION + PLASMA_ABETA_bl\" #> [1] \"CDRSB_bl ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl\" #> [1] \"CDRSB_bl ~ AGE + GENDER + EDUCATION + PLASMA_NFL_bl\" #> [1] \"CDRSB_bl ~ AGE + GENDER + EDUCATION + PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"MMSE_bl ~ AGE + GENDER + EDUCATION\" #> [1] \"MMSE_bl ~ AGE + GENDER + EDUCATION + PLASMA_ABETA_bl\" #> [1] \"MMSE_bl ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl\" #> [1] \"MMSE_bl ~ AGE + GENDER + EDUCATION + PLASMA_NFL_bl\" #> [1] \"MMSE_bl ~ AGE + GENDER + EDUCATION + PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"CDRSB_bl ~ AGE + GENDER + EDUCATION\" #> [1] \"CDRSB_bl ~ AGE + GENDER + EDUCATION + PLASMA_ABETA_bl\" #> [1] \"CDRSB_bl ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl\" #> [1] \"CDRSB_bl ~ AGE + GENDER + EDUCATION + PLASMA_NFL_bl\" #> [1] \"CDRSB_bl ~ AGE + GENDER + EDUCATION + PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\" #> [1] \"MMSE_bl ~ AGE + GENDER + EDUCATION\" #> [1] \"MMSE_bl ~ AGE + GENDER + EDUCATION + PLASMA_ABETA_bl\" #> [1] \"MMSE_bl ~ AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl\" #> [1] \"MMSE_bl ~ AGE + GENDER + EDUCATION + PLASMA_NFL_bl\" #> [1] \"MMSE_bl ~ AGE + GENDER + EDUCATION + PLASMA_ABETA_bl + PLASMA_PTAU181_bl + PLASMA_NFL_bl\"  # summarise model model_summary <- model %>% summary()  # plot results fig1 <- model_summary %>% aba_plot_coef() fig2 <- model_summary %>% aba_plot_metric()  ## polynomial regression ## model <- data %>%   aba_model() %>%   set_outcomes(MRI_HIPP_bl) %>%   set_covariates(     c('AGE', 'EDUCATION')   ) %>%   set_stats(     stat_lm(),     stat_lm(poly = list(AGE=1)),     stat_lm(poly = 2),     stat_lm(poly = list(AGE = 2))   ) %>%   fit() #> [1] \"MRI_HIPP_bl ~ AGE + EDUCATION\" #> [1] \"MRI_HIPP_bl ~ poly(AGE, 1, raw = TRUE) + EDUCATION\" #> [1] \"MRI_HIPP_bl ~ poly(AGE, 2, raw = TRUE) + poly(EDUCATION, 2, raw = TRUE)\" #> [1] \"MRI_HIPP_bl ~ poly(AGE, 2, raw = TRUE) + EDUCATION\"  model_summary <- model %>% summary()"},{"path":"https://ncullen93.github.io/abaR/reference/stat_lme.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an lme stat object. — stat_lme","title":"Create an lme stat object. — stat_lme","text":"function creates lme stat object can passed input set_stats() function building aba model. stat performs linear mixed effects model analysis using lme function nlme package. Please note default mode include interaction term time variable predictor - .e., time*predictor model formula - happen covariates. Also, model fits random intercepts random slopes. data model long format one row per subject-visit.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/stat_lme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an lme stat object. — stat_lme","text":"","code":"stat_lme(id, time, poly = NULL, std.beta = FALSE, complete.cases = TRUE)"},{"path":"https://ncullen93.github.io/abaR/reference/stat_lme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an lme stat object. — stat_lme","text":"id string. variable data represents subject id used random intercepts random slopes. time string. time variable data represents time baseline visit occured. poly numeric list. Whether use polynomial regression. Supplying single number call poly(..., #NUMBER#, raw=TRUE) every covariate predictor. Supplying list allows perform polynomial expansion specific variables. NULL means polynomials. std.beta logical. Whether standardize model predictors covariates prior analysis. complete.cases logical. Whether include subset data missing data outcomes, predictors, covariates. Note complete cases considering within group - outcome combination across predictor sets.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/stat_lme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an lme stat object. — stat_lme","text":"abaStat object lme stat type.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/stat_lme.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an lme stat object. — stat_lme","text":"","code":"data <- adnimerge %>%   dplyr::filter(VISCODE %in% c('bl','m06','m12','m24'))  model <- data %>% aba_model() %>%   set_groups(     everyone(),     DX_bl %in% c('MCI', 'AD')   ) %>%   set_outcomes(CDRSB, ADAS13) %>%   set_predictors(     PLASMA_ABETA_bl,     PLASMA_PTAU181_bl,     PLASMA_NFL_bl,     c(PLASMA_ABETA_bl, PLASMA_PTAU181_bl, PLASMA_NFL_bl)   ) %>%   set_covariates(AGE, GENDER, EDUCATION) %>%   set_stats(     stat_lme(id = 'RID', time = 'YEARS_bl')   ) %>%   fit() #> [1] \"CDRSB ~ YEARS_bl + AGE + GENDER + EDUCATION\" #> [1] \"CDRSB ~ YEARS_bl + AGE + GENDER + EDUCATION + PLASMA_ABETA_bl*YEARS_bl\" #> [1] \"CDRSB ~ YEARS_bl + AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl*YEARS_bl\" #> [1] \"CDRSB ~ YEARS_bl + AGE + GENDER + EDUCATION + PLASMA_NFL_bl*YEARS_bl\" #> [1] \"CDRSB ~ YEARS_bl + AGE + GENDER + EDUCATION + PLASMA_ABETA_bl*YEARS_bl + PLASMA_PTAU181_bl*YEARS_bl + PLASMA_NFL_bl*YEARS_bl\" #> [1] \"ADAS13 ~ YEARS_bl + AGE + GENDER + EDUCATION\" #> [1] \"ADAS13 ~ YEARS_bl + AGE + GENDER + EDUCATION + PLASMA_ABETA_bl*YEARS_bl\" #> [1] \"ADAS13 ~ YEARS_bl + AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl*YEARS_bl\" #> [1] \"ADAS13 ~ YEARS_bl + AGE + GENDER + EDUCATION + PLASMA_NFL_bl*YEARS_bl\" #> [1] \"ADAS13 ~ YEARS_bl + AGE + GENDER + EDUCATION + PLASMA_ABETA_bl*YEARS_bl + PLASMA_PTAU181_bl*YEARS_bl + PLASMA_NFL_bl*YEARS_bl\" #> [1] \"CDRSB ~ YEARS_bl + AGE + GENDER + EDUCATION\" #> [1] \"CDRSB ~ YEARS_bl + AGE + GENDER + EDUCATION + PLASMA_ABETA_bl*YEARS_bl\" #> [1] \"CDRSB ~ YEARS_bl + AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl*YEARS_bl\" #> [1] \"CDRSB ~ YEARS_bl + AGE + GENDER + EDUCATION + PLASMA_NFL_bl*YEARS_bl\" #> [1] \"CDRSB ~ YEARS_bl + AGE + GENDER + EDUCATION + PLASMA_ABETA_bl*YEARS_bl + PLASMA_PTAU181_bl*YEARS_bl + PLASMA_NFL_bl*YEARS_bl\" #> [1] \"ADAS13 ~ YEARS_bl + AGE + GENDER + EDUCATION\" #> [1] \"ADAS13 ~ YEARS_bl + AGE + GENDER + EDUCATION + PLASMA_ABETA_bl*YEARS_bl\" #> [1] \"ADAS13 ~ YEARS_bl + AGE + GENDER + EDUCATION + PLASMA_PTAU181_bl*YEARS_bl\" #> [1] \"ADAS13 ~ YEARS_bl + AGE + GENDER + EDUCATION + PLASMA_NFL_bl*YEARS_bl\" #> [1] \"ADAS13 ~ YEARS_bl + AGE + GENDER + EDUCATION + PLASMA_ABETA_bl*YEARS_bl + PLASMA_PTAU181_bl*YEARS_bl + PLASMA_NFL_bl*YEARS_bl\"  model_summary <- model %>% aba_summary() #> New names: #> • `nobs` -> `nobs...1` #> • `nobs` -> `nobs...6` #> New names: #> • `nobs` -> `nobs...1` #> • `nobs` -> `nobs...6` #> New names: #> • `nobs` -> `nobs...1` #> • `nobs` -> `nobs...6` #> New names: #> • `nobs` -> `nobs...1` #> • `nobs` -> `nobs...6` #> New names: #> • `nobs` -> `nobs...1` #> • `nobs` -> `nobs...6` #> New names: #> • `nobs` -> `nobs...1` #> • `nobs` -> `nobs...6` #> New names: #> • `nobs` -> `nobs...1` #> • `nobs` -> `nobs...6` #> New names: #> • `nobs` -> `nobs...1` #> • `nobs` -> `nobs...6` #> New names: #> • `nobs` -> `nobs...1` #> • `nobs` -> `nobs...6` #> New names: #> • `nobs` -> `nobs...1` #> • `nobs` -> `nobs...6` #> New names: #> • `nobs` -> `nobs...1` #> • `nobs` -> `nobs...6` #> New names: #> • `nobs` -> `nobs...1` #> • `nobs` -> `nobs...6` #> New names: #> • `nobs` -> `nobs...1` #> • `nobs` -> `nobs...6` #> New names: #> • `nobs` -> `nobs...1` #> • `nobs` -> `nobs...6` #> New names: #> • `nobs` -> `nobs...1` #> • `nobs` -> `nobs...6` #> New names: #> • `nobs` -> `nobs...1` #> • `nobs` -> `nobs...6` #> New names: #> • `nobs` -> `nobs...1` #> • `nobs` -> `nobs...6` #> New names: #> • `nobs` -> `nobs...1` #> • `nobs` -> `nobs...6` #> New names: #> • `nobs` -> `nobs...1` #> • `nobs` -> `nobs...6` #> New names: #> • `nobs` -> `nobs...1` #> • `nobs` -> `nobs...6`"},{"path":"https://ncullen93.github.io/abaR/reference/stat_lmer.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an lmer stat object. — stat_lmer","title":"Create an lmer stat object. — stat_lmer","text":"function creates lmer stat object can passed input set_stats() function building aba model. stat performs linear mixed effects model analysis using lmer function nlmer package. Please note default mode include interaction term time variable predictor - .e., time*predictor model formula - happen covariates. Also, model fits random intercepts random slopes. data model long format one row per subject-visit.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/stat_lmer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an lmer stat object. — stat_lmer","text":"","code":"stat_lmer(id, time, std.beta = FALSE, complete.cases = TRUE)"},{"path":"https://ncullen93.github.io/abaR/reference/stat_lmer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an lmer stat object. — stat_lmer","text":"id string. variable data represents subject id used random intercepts random slopes. time string. time variable data represents time baseline visit occured. std.beta logical. Whether standardize model predictors covariates prior analysis. complete.cases logical. Whether include subset data missing data outcomes, predictors, covariates. Note complete cases considering within group - outcome combination across predictor sets.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/stat_lmer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an lmer stat object. — stat_lmer","text":"abaStat object lmer stat type.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/stat_lmer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an lmer stat object. — stat_lmer","text":"","code":"data <- adnimerge %>%   dplyr::filter(VISCODE %in% c('bl','m06','m12','m24'))  model <- data %>% aba_model() %>%   set_groups(     everyone(),     DX_bl %in% c('MCI', 'AD')   ) %>%   set_outcomes(CDRSB, ADAS13) %>%   set_predictors(     PLASMA_ABETA_bl,     PLASMA_PTAU181_bl,     PLASMA_NFL_bl,     c(PLASMA_ABETA_bl, PLASMA_PTAU181_bl, PLASMA_NFL_bl)   ) %>%   set_covariates(AGE, GENDER, EDUCATION) %>%   set_stats(     stat_lmer(id = 'RID', time = 'YEARS_bl')   ) %>%   fit() #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> Warning: Model failed to converge with 1 negative eigenvalue: -4.6e-01 #> boundary (singular) fit: see help('isSingular')  model_summary <- model %>% aba_summary() #> New names: #> • `nobs` -> `nobs...1` #> • `nobs` -> `nobs...9` #> New names: #> • `nobs` -> `nobs...1` #> • `nobs` -> `nobs...9` #> New names: #> • `nobs` -> `nobs...1` #> • `nobs` -> `nobs...9` #> New names: #> • `nobs` -> `nobs...1` #> • `nobs` -> `nobs...9` #> New names: #> • `nobs` -> `nobs...1` #> • `nobs` -> `nobs...9` #> New names: #> • `nobs` -> `nobs...1` #> • `nobs` -> `nobs...9` #> New names: #> • `nobs` -> `nobs...1` #> • `nobs` -> `nobs...9` #> New names: #> • `nobs` -> `nobs...1` #> • `nobs` -> `nobs...9` #> New names: #> • `nobs` -> `nobs...1` #> • `nobs` -> `nobs...9` #> New names: #> • `nobs` -> `nobs...1` #> • `nobs` -> `nobs...9` #> New names: #> • `nobs` -> `nobs...1` #> • `nobs` -> `nobs...9` #> New names: #> • `nobs` -> `nobs...1` #> • `nobs` -> `nobs...9` #> New names: #> • `nobs` -> `nobs...1` #> • `nobs` -> `nobs...9` #> New names: #> • `nobs` -> `nobs...1` #> • `nobs` -> `nobs...9` #> New names: #> • `nobs` -> `nobs...1` #> • `nobs` -> `nobs...9` #> New names: #> • `nobs` -> `nobs...1` #> • `nobs` -> `nobs...9` #> New names: #> • `nobs` -> `nobs...1` #> • `nobs` -> `nobs...9` #> New names: #> • `nobs` -> `nobs...1` #> • `nobs` -> `nobs...9` #> New names: #> • `nobs` -> `nobs...1` #> • `nobs` -> `nobs...9` #> New names: #> • `nobs` -> `nobs...1` #> • `nobs` -> `nobs...9`"},{"path":"https://ncullen93.github.io/abaR/reference/stat_mmrm.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an mmrm stat object. — stat_mmrm","title":"Create an mmrm stat object. — stat_mmrm","text":"function creates mmrm stat object can passed input set_stats() function building aba model. stat performs MMRM analysis using gls function nlme package. Please note default mode include interaction term time variable predictor - .e., time*predictor model formula - happen covariates. data model long format one row per subject-visit.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/stat_mmrm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an mmrm stat object. — stat_mmrm","text":"","code":"stat_mmrm(   id,   time,   treatment = NULL,   baseline_suffix = \"bl\",   std.beta = FALSE,   complete.cases = TRUE )"},{"path":"https://ncullen93.github.io/abaR/reference/stat_mmrm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an mmrm stat object. — stat_mmrm","text":"id string. variable data represents subject id used random intercepts random slopes. time string. time variable data represents time baseline visit occured. categorical variable continuous variable values shared subjects. fact time visits common across subjects major operational difference stat_lme, among differences. treatment string. treatment variable whose effect outcome care . useful aba_emmeans functions. baseline_suffix string. suffix add outcome variable order pick associated baseline variable. must adjust baseline outcome mmrm, way specify different predictor outcome. outcomes e.g. \"CDRSB\" \"MMSE\", baseline_suffix \"bl\" mean mmrm fit \"CDRSB\" outcome \"CDRSB_bl\" added formula every fit \"MMSE\" outcome \"MMSE_bl\" added. means baseline variables must actually exist data. Also, always interaction baseline outcome variable time variable. std.beta logical. Whether standardize model predictors covariates prior analysis. complete.cases logical. Whether include subset data missing data outcomes, predictors, covariates. Note complete cases considering within group - outcome combination across predictor sets.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/stat_mmrm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an mmrm stat object. — stat_mmrm","text":"abaStat object mmrm stat type.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/stat_mmrm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an mmrm stat object. — stat_mmrm","text":"","code":"data <- adnimerge %>%   dplyr::filter(VISCODE %in% c('bl','m06','m12','m24'))  model <- data %>% aba_model() %>%   set_groups(     DX_bl %in% c('MCI', 'AD')   ) %>%   set_outcomes(CDRSB, ADAS13) %>%   set_predictors(     PLASMA_ABETA_bl,     PLASMA_PTAU181_bl,     PLASMA_NFL_bl   ) %>%   set_covariates(AGE, GENDER, EDUCATION) %>%   set_stats(     stat_mmrm(id = 'RID', time = 'VISCODE')   ) %>%   fit()  model_summary <- model %>% aba_summary()"},{"path":"https://ncullen93.github.io/abaR/reference/stat_retest.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a retest stat object. — stat_retest","title":"Create a retest stat object. — stat_retest","text":"function creates retest stat object can passed input set_stats() function building aba model. stat performs test-retest analysis data long format. can used calculate bias variance biomarkers (variables, matter) measured multiple times. Moreover, result model fit stat can subsequently passed aba_robust() object order test effect test-retest bias/variance clinical prediction models can also fit aba model.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/stat_retest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a retest stat object. — stat_retest","text":"","code":"stat_retest(   id,   time,   method = c(\"percent_change\"),   std.beta = FALSE,   complete.cases = FALSE )"},{"path":"https://ncullen93.github.io/abaR/reference/stat_retest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a retest stat object. — stat_retest","text":"id string. subject id variable dataset. necessary keep track values belong individuals. time string. time variable dataset. necessary keep track values belong time point. method string. method used calculate difference outcome values across time points. Options : percent_change calculated 100 * (x - y) / y x earlier time y later time. std.beta logical. Whether standardize model outcomes predictors/outcomes prior analysis. complete.cases logical. Whether include subset data missing data outcomes, predictors, covariates. Note complete cases considering within group - outcome combination across predictor sets.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/stat_retest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a retest stat object. — stat_retest","text":"abaStat object retest stat type.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/stat_retest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a retest stat object. — stat_retest","text":"","code":"# use longitudinal data in healthy controls as pseudo \"test-retest\" data <- adnimerge %>%   dplyr::filter(     VISCODE %in% c('bl' ,'m06', 'm12'),     DX_bl == 'CU'   )  # fit model over two groups and two endpoints model <- data %>% aba_model() %>%   set_groups(     everyone(),     CSF_ABETA_STATUS_bl == 1,     .labels = c('CU', 'CU AB-')   ) %>%   set_outcomes(     ADAS13, MMSE,     .labels = c('ADAS13', 'MMSE')   ) %>%   set_stats(     stat_retest(id = 'RID', time = 'VISCODE')   ) %>%   aba_fit()  # summarise model to get bias and variance estimates model_summary <- model %>% aba_summary()  # plot model results like any other summary g <- model_summary %>% aba_plot_coef(   axis=c('term', 'group', 'outcome','predictor'), coord_flip=TRUE )"},{"path":"https://ncullen93.github.io/abaR/reference/stat_roc.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a roc stat object. — stat_roc","title":"Create a roc stat object. — stat_roc","text":"function creates roc stat object can passed input set_stats() function building aba model. stat performs traditional ROC / cutpoint analysis binary outcome using optimal.cutpoints function OptimalCutpoints package. Note outcomes model binary coded 0 = healthy 1 = disease. Coefficients presented optimal cutpoint model derived Youden's index (whatever method specified). Default metrics include AUC.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/stat_roc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a roc stat object. — stat_roc","text":"","code":"stat_roc(   direction = \"<\",   method = \"Youden\",   std.beta = FALSE,   complete.cases = TRUE )"},{"path":"https://ncullen93.github.io/abaR/reference/stat_roc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a roc stat object. — stat_roc","text":"direction '<' '>. direction interpret healthy value. '<' default value interpreted increasing predictor values worse. '>' therefore interpreted higher predictor values closer healthy (outcome value 0). method string. method use calculate optimal cutoff value. See OptimalCutpoints::optimal.cutpoints function info. std.beta logical. Whether standardize model predictors covariates prior analysis. complete.cases logical. Whether include subset data missing data outcomes, predictors, covariates. Note complete cases considering within group - outcome combination across predictor sets.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/stat_roc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a roc stat object. — stat_roc","text":"abaStat object glm stat type.","code":""},{"path":"https://ncullen93.github.io/abaR/reference/stat_roc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a roc stat object. — stat_roc","text":"","code":"data <- adnimerge %>% dplyr::filter(VISCODE == 'bl')  # fit a roc model to predict a binary outcome model <- data %>% aba_model() %>%   set_groups(     everyone(),     DX_bl %in% c('MCI', 'AD')   ) %>%   set_outcomes(CSF_ABETA_STATUS_bl) %>%   set_predictors(PLASMA_PTAU181_bl, PLASMA_NFL_bl) %>%   set_stats(     stat_roc(method='Youden')   ) %>%   fit()  # summarise model model_summary <- model %>% summary()  # if using predictors where higher values are better, then flip direction model2 <- model %>%   set_predictors(PLASMA_ABETA_bl) %>%   set_stats(     stat_roc(direction = '>')   ) %>%   fit() model2_summary <- model2 %>% aba_summary()"},{"path":"https://ncullen93.github.io/abaR/reference/theme_aba.html","id":null,"dir":"Reference","previous_headings":"","what":"Custom aba ggplot2 theme — theme_aba","title":"Custom aba ggplot2 theme — theme_aba","text":"Custom aba ggplot2 theme","code":""},{"path":"https://ncullen93.github.io/abaR/reference/theme_aba.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Custom aba ggplot2 theme — theme_aba","text":"","code":"theme_aba(   base_size = 16,   legend.position = \"top\",   coord_flip = FALSE,   legend_title = FALSE,   facet_labels = TRUE,   axis_title = FALSE,   family = c(\"Helvetica\", \"Tahoma\", \"Verdana\") )"},{"path":"https://ncullen93.github.io/abaR/reference/theme_aba.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Custom aba ggplot2 theme — theme_aba","text":"base_size integer. base font size legend.position string. place legend ('none' = legend) coord_flip logical. whether flip x y axes legend_title logical. whether include legend title. facet_labels logical. Whether include labels facets. axis_title logical. Whether include axis title non-primary axis family string. font family use. one Verdana, Tahoma, Helvetica","code":""},{"path":"https://ncullen93.github.io/abaR/reference/theme_aba.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Custom aba ggplot2 theme — theme_aba","text":"ggplot2 theme can added ggplot object","code":""},{"path":"https://ncullen93.github.io/abaR/reference/theme_aba.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Custom aba ggplot2 theme — theme_aba","text":"","code":"library(ggplot2)  data <- data.frame(x=1:10, y=1:10) fig <- ggplot(data, aes(x=x,y=y)) + geom_point() + theme_aba()"},{"path":"https://ncullen93.github.io/abaR/news/index.html","id":"aba-010","dir":"Changelog","previous_headings":"","what":"aba 0.1.0","title":"aba 0.1.0","text":"Converted internal code new tidyverse rules Added tests passed devtools check CRAN rules","code":""},{"path":"https://ncullen93.github.io/abaR/news/index.html","id":"aba-009","dir":"Changelog","previous_headings":"","what":"aba 0.0.9","title":"aba 0.0.9","text":"CRAN release: 2021-12-16 Added NEWS.md file track changes package. first version package","code":""}]
