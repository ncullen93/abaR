% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/aba_plot.R
\name{aba_plot_coef}
\alias{aba_plot_coef}
\title{Plot coefficients of an aba model summary}
\usage{
aba_plot_coef(
  object,
  term_labels = NULL,
  axis = c("term", "predictor", "outcome", "group"),
  coord_flip = FALSE,
  include_covariates = TRUE,
  sort = FALSE,
  facet_labels = TRUE,
  facet_axis = FALSE,
  palette = c("jama", "nature", "lancet", "none"),
  plotly = FALSE
)
}
\arguments{
\item{object}{an aba model summary. The object to plot - this should be the
result of an \code{aba_summary()} call.}

\item{term_labels}{list. A list where name is equal to a term
variable and value is equal to the label you want to replace it with in
the plot. Useful to exchange variable names with labels. Rememeber that
terms are the data variables/columns which make up predictors.}

\item{axis}{string. Specifies the x axis variable, color/fill variable, and
facet variable in that order. Should be a vector of length three that
includes only "predictor", "outcome", and "group" as values.}

\item{coord_flip}{logical. Whether to flip the x and y axes. This can be
useful when there are a large amount of predictor sets and you want to
view metrics vertically.}

\item{include_covariates}{logical. Whether to include covariates}

\item{sort}{logical. Whether to sort axis labels by coefficient value}

\item{facet_labels}{logical. Whether to include facet labels.}

\item{facet_axis}{logical. Whether to keep axis segment/labels for all
facets or whether to remove them for facets.}

\item{palette}{string. Which ggpubr palette to use. See \code{ggpubr::set_palette}.}

\item{plotly}{logical. Whether to use plot.ly instead of standard ggplot.
Defaults to false. Using ggplotly can be useful if you want interactivity
on web pages.}
}
\value{
a ggplot of the specified aba model summary coefficients
}
\description{
Plot coefficients of an aba model summary
}
\examples{

# fit aba model
model <- aba_model() \%>\%
  set_data(adnimerge \%>\% dplyr::filter(VISCODE == 'bl')) \%>\%
  set_groups(everyone()) \%>\%
  set_outcomes(ConvertedToAlzheimers, CSF_ABETA_STATUS_bl,
               labels=c('Conversion to AD', 'CSF Abeta Status')) \%>\%
  set_predictors(
    PLASMA_ABETA_bl, PLASMA_PTAU181_bl, PLASMA_NFL_bl,
    c(PLASMA_ABETA_bl, PLASMA_PTAU181_bl, PLASMA_NFL_bl),
    labels = c('A','T','N','ATN')
  ) \%>\%
  set_stats(stat_glm(std.beta=TRUE)) \%>\%
  fit()

# summarise aba model to calculate metrics
model_summary <- model \%>\% aba_summary()

# plot the coefficients using default
coef_plot <- model_summary \%>\% aba_plot_coef(coord_flip = TRUE)

# add term labels
term_labels <- list(
  'PLASMA_ABETA_bl' = 'Plasma Abeta',
  'PLASMA_PTAU181_bl' = 'Plasma P-tau',
  'PLASMA_NFL_bl' = 'Plasma NfL'
)
coef_plot2 <- model_summary \%>\% aba_plot_coef(coord_flip = TRUE,
                                              term_labels = term_labels)

# compare predictor coefficients across outcomes
coef_plot3 <- model_summary \%>\%
  aba_plot_coef(
    axis = c('outcome', 'predictor','term','group'), coord_flip=TRUE
  )
}
